{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Cognizant Intelligent Test Scripter # Cognizant Intelligent Test Scripter is an open-source script-less test automation solution that provides a unified interface for all the day-to-day test automation activities such as test design, test development, test execution, reporting and maintenance. Features # Web automation with multi browser support using Selenium Image based automation using Sikuli Reusable components for reusing scripts Test-data parameterisation and environment-based dynamic test-data support Object Repository supporting Object Group in Web and Mobile Exploratory Testing that records flow, takes screen shots, uploads bugs and converts recorded steps into test cases Execution in cloud platforms like SauceLabs , BrowserStack , Perfecto Layout Testing using Galen framework Accessibility Testing using aXe Reusable / iteration / browser level HTML(json) report with Searching, Sorting, Grouping, Themes, Templates, Galen Image comparison features Validation, Re factoring , Search in all components(Testcase/Reusable/TestData/TestSet/OR) Selenium grid support and GridNode UI for creating grid clients Appium Integration for Mobile web Automation Object Spy For MobileNative Apps[IOS and Android] Test Management module(QC , JIRA-Zephyr , TFS) Send Reports in mail after Execution Execute failed testcases in a test set automatically after a run Custom methods,externalize the custom actions/methods as separate project CLI to support multiple switches and command line variables Utility(Feature Editor) to manage BDD features, support Feature file creation, import, export feature files WebPage performance metrics - Page and Resource timings report, Har Compare and Har Compare report ,CLI to get performance result/report for an execution Angular support using ng-webdriver(protractor) Download # You can download the Latest version of Cognizant Intelligent Test Scripter from the Releases . After extracting the zip, follow the steps from Installation.md Note Cognizant Intelligent Test Scripter is distributed under Apache License 2.0 and the sources are available on GitHub . Note This website is also posted on GitHub as open-source so that anyone can help improve the documentation. Prerequisites # Hardware Requirements # RAM: 2GB preferably 4 GB Processor: Pentium 4 or faster Operating System: Windows (32/64 bit)/ MAC OS/Linux Note Cognizant Intelligent Test Scripter is built on Java. Hence it will work on any desktop OS which supports Java. Software Requirements # Latest Java 1.8 IDE supporting Java Development (Eclipse, Netbeans, etc.) Devices(For mobile execution) # All Android based devices All iOS based devices Supported Browsers # Selenium supported browsers are covered by default. For more information, refer the link . Contact # If you have any queries on Cognizant Intelligent Test Scripter, please post your questions on Cognizant ITS Google Group . To ask specific questions on project development, to discuss future improvements or for any other technical detail, please join the Cognizant ITS chat on Gitter .","title":"Home"},{"location":"index.html#cognizant-intelligent-test-scripter","text":"Cognizant Intelligent Test Scripter is an open-source script-less test automation solution that provides a unified interface for all the day-to-day test automation activities such as test design, test development, test execution, reporting and maintenance.","title":"Cognizant Intelligent Test Scripter"},{"location":"index.html#features","text":"Web automation with multi browser support using Selenium Image based automation using Sikuli Reusable components for reusing scripts Test-data parameterisation and environment-based dynamic test-data support Object Repository supporting Object Group in Web and Mobile Exploratory Testing that records flow, takes screen shots, uploads bugs and converts recorded steps into test cases Execution in cloud platforms like SauceLabs , BrowserStack , Perfecto Layout Testing using Galen framework Accessibility Testing using aXe Reusable / iteration / browser level HTML(json) report with Searching, Sorting, Grouping, Themes, Templates, Galen Image comparison features Validation, Re factoring , Search in all components(Testcase/Reusable/TestData/TestSet/OR) Selenium grid support and GridNode UI for creating grid clients Appium Integration for Mobile web Automation Object Spy For MobileNative Apps[IOS and Android] Test Management module(QC , JIRA-Zephyr , TFS) Send Reports in mail after Execution Execute failed testcases in a test set automatically after a run Custom methods,externalize the custom actions/methods as separate project CLI to support multiple switches and command line variables Utility(Feature Editor) to manage BDD features, support Feature file creation, import, export feature files WebPage performance metrics - Page and Resource timings report, Har Compare and Har Compare report ,CLI to get performance result/report for an execution Angular support using ng-webdriver(protractor)","title":"Features"},{"location":"index.html#download","text":"You can download the Latest version of Cognizant Intelligent Test Scripter from the Releases . After extracting the zip, follow the steps from Installation.md Note Cognizant Intelligent Test Scripter is distributed under Apache License 2.0 and the sources are available on GitHub . Note This website is also posted on GitHub as open-source so that anyone can help improve the documentation.","title":"Download"},{"location":"index.html#prerequisites","text":"","title":"Prerequisites"},{"location":"index.html#hardware-requirements","text":"RAM: 2GB preferably 4 GB Processor: Pentium 4 or faster Operating System: Windows (32/64 bit)/ MAC OS/Linux Note Cognizant Intelligent Test Scripter is built on Java. Hence it will work on any desktop OS which supports Java.","title":"Hardware Requirements"},{"location":"index.html#software-requirements","text":"Latest Java 1.8 IDE supporting Java Development (Eclipse, Netbeans, etc.)","title":"Software Requirements"},{"location":"index.html#devicesfor-mobile-execution","text":"All Android based devices All iOS based devices","title":"Devices(For mobile execution)"},{"location":"index.html#supported-browsers","text":"Selenium supported browsers are covered by default. For more information, refer the link .","title":"Supported Browsers"},{"location":"index.html#contact","text":"If you have any queries on Cognizant Intelligent Test Scripter, please post your questions on Cognizant ITS Google Group . To ask specific questions on project development, to discuss future improvements or for any other technical detail, please join the Cognizant ITS chat on Gitter .","title":"Contact"},{"location":"shortcuts.html","text":"Shortcuts # File Menu # Shortcut Keys Description Ctrl + Shift + N Create a new project Ctrl +Shift+ O Open an existing project Ctrl +Shift+ S Save All F1 Open Help File Navigation # Shortcut Keys Description Alt+ shift + N Navigate to TEST DESIGN panel Alt+ shift + E Navigate to TEST EXECUTION panel Alt+ shift + D Navigate to DASHBOARD Alt+ shift + A Adjust UI Workspace # Shortcut Keys Description Ctrl + Plus Add row Ctrl + Minus Delete rows Ctrl + B Toggle Breakpoint Ctrl + / Toggle Comment Test Data Table # Shortcut Keys Description Ctrl + Plus Add Row Ctrl + Minus Remove Row Left Double Click Edit header/ cell data Common # Shortcut Keys Description F2 Rename Del Delete Ctrl + X Cut Ctrl + C Copy Ctrl + V Paste Others # Shortcut Keys Description F9 show Log Ctrl + Shift + E Launch Exploratory Ribbon Ctrl+ Alt + S Open Run settings","title":"Shortcuts"},{"location":"shortcuts.html#shortcuts","text":"","title":"Shortcuts"},{"location":"shortcuts.html#file-menu","text":"Shortcut Keys Description Ctrl + Shift + N Create a new project Ctrl +Shift+ O Open an existing project Ctrl +Shift+ S Save All F1 Open Help File","title":"File Menu"},{"location":"shortcuts.html#navigation","text":"Shortcut Keys Description Alt+ shift + N Navigate to TEST DESIGN panel Alt+ shift + E Navigate to TEST EXECUTION panel Alt+ shift + D Navigate to DASHBOARD Alt+ shift + A Adjust UI","title":"Navigation"},{"location":"shortcuts.html#workspace","text":"Shortcut Keys Description Ctrl + Plus Add row Ctrl + Minus Delete rows Ctrl + B Toggle Breakpoint Ctrl + / Toggle Comment","title":"Workspace"},{"location":"shortcuts.html#test-data-table","text":"Shortcut Keys Description Ctrl + Plus Add Row Ctrl + Minus Remove Row Left Double Click Edit header/ cell data","title":"Test Data Table"},{"location":"shortcuts.html#common","text":"Shortcut Keys Description F2 Rename Del Delete Ctrl + X Cut Ctrl + C Copy Ctrl + V Paste","title":"Common"},{"location":"shortcuts.html#others","text":"Shortcut Keys Description F9 show Log Ctrl + Shift + E Launch Exploratory Ribbon Ctrl+ Alt + S Open Run settings","title":"Others"},{"location":"actions/webactions.html","text":"Web Actions # Basic # Set # Description : This function is used to enter data in an object. Input Format : @Expected Text Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example. Click # Description : This function is used to perform click operation on an object. Example: ObjectName Input Condition Object rightClick # Description : This function is used to perform right click operation on an object or in the browser. Example: ObjectName Input Condition Browser Object SubmitIfExists # Description : This function will check if an object exists. If the object exists, it will submit else it will ignore that step. Example: ObjectName Input Condition Object RestartBrowser # Description : This function is used to restart browser. Example: ObjectName Input Condition Browser changeWaitTime # Description : This function is used to change the default wait time(Default 10 sec). The default wait time for all the wait actions defined after changeWaitTime action will be the same as defined in the changeWaitTime action. Input Format : @Time in seconds Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% setElementTimeOut # Description : This function is used to change the default timeout for Cognizant Intelligent Test Scripter's Object finding logic.(Default 10 second). The same action needs to be called with the default time (10 sec) as parameter when there is a need to switch to the default time for the succeeding steps. Input Format : @Time in seconds Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% setBrowserSize # Description : This function will Set the browser size Input Format : In pixels for example @700x800 or @700,800 or @700 800 Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% clickIfExists # Description : This function will check if an element exists. If the element exists, it will click the element, else it will ignore that step. Example: ObjectName Input Condition Object SetIfExists # Description : This function will check if an element exists. If the element exists, data will be set for that element or that step will be ignored. Input Format : @Expected Text Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% setAndCheck # Description : This function is used to enter data in object and check if the element's value matches with the entered value. Input Format : @Expected Text Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% setEncrypted # Description : This function is used to enter encrypted data to the object specified Input Format : @Encrypted text Example: ObjectName Input Condition Object @value Object Sheet:Column Note : If the data is passed from a data sheet, the data in the datasheet should be encrypted filler # Description : This is an empty action (does nothing), useful in some cases like looping/debugging. Example: ObjectName Input Condition Browser StartBrowser # Description : This function is used to start a specified browser. Input Format : @Browser's Name Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% StopBrowser # Description : This function is used to stop the current browser Example: ObjectName Input Condition Browser AddVar # Description : This function is used to add a user-defined variable with a desired value and the scope of this variable is till the end of the test case in which it is defined Input Format : @Expected Text Condition : %variable name% Example: ObjectName Input Condition Browser @value %Variable% Browser Sheet:Column %Variable% Browser %dynamicVar% %Variable% AddGlobalVar # Description : Same as AddVar but scope is till the end of the test set execution. Input Format : Text in Input Condition : %variable name% Example: ObjectName Input Condition Browser @value %Variable% Browser Sheet:Column %Variable% Browser %dynamicVar% %Variable% clear # Description : This function is used to clear the object's text Example: ObjectName Input Condition Object moveTo # Description : Move the browser view to the specified element. Example: ObjectName Input Condition Object Open # Description : This function will open the URL provided by the user in the default browser Input Format : @Expected Text Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% highlight # Description : Make a rectangular border around the element Input Format : Color in hexcode like @#ff44ff . If it is left empty red will be taken as default. Example: ObjectName Input Condition Object Object @value Object Sheet:Column Object %dynamicVar% Verify Element # verifyElementNotPresent # Description : This function will check if the specified element is not present in the web page ie. In the DOM . Example: ObjectName Input Condition Object verifyElementNotSelected # Description : This function will check if the specified element is not selected. Example: ObjectName Input Condition Object verifyElementNotDisplayed # Description : This function will verify if the element is not displayed. Example: ObjectName Input Condition Object verifyElementNotEnabled # Description : This function will check if the specified element is not enabled Example: ObjectName Input Condition Object verifyElementDisplayed # Description : This function will check if the object is displayed on web page. Example: ObjectName Input Condition Object verifyHSrollBarPresent # Description : This function will check if the horizontal scrollbar is present. Example: ObjectName Input Condition Browser verifyHSrollBarNotPresent # Description : This function will check if the horizontal scrollbar is not present. Example: ObjectName Input Condition Browser verifyVSrollBarPresent # Description : This function will check if the vertical scrollbar is present. Example: ObjectName Input Condition Browser verifyVSrollBarNotPresent # Description : This function will check if the vertical scrollbar is not present. Example: ObjectName Input Condition Browser verifyElementPresent # Description : This function will check if the specified element is present in the web page ie) in the DOM. Example: ObjectName Input Condition Object verifyElementSelected # Description : This function will check if the element is selected. Example: ObjectName Input Condition Object verifyElementEnabled # Description : This function will check if the element is enabled. Example: ObjectName Input Condition Object verifyPageSource # Description : This function will check if the page source content of the current page is matching with the expected page source content provided by the user. Input Format : @Expected PageSource Content Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% Browser Utility # maximize # Description :This function is used for maximizing the browser window. Example: ObjectName Input Condition Browser authenticate # Description :This function is used for handing the authentication window. Supports IE only. If executed for other browsers the script will fail. You can skip this by setting optional value in the Condition field. Input Format : @username##password Condition : optional Example: ObjectName Input Condition Browser @data Browser @data optional By Label # setInputByLabel # Description : This function will set an input element, with the given data, that is adjacent to the provided label element. Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% clickInputByLabel # Description : This function will click an input element that is adjacent to the provided label element. Example: ObjectName Input Condition Object clickInputByText # Description : This function will click an input element that is adjacent to the provided text Input Format : @Expected Text Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% submitInputByLabel # Description : This function will submit input element adjacent to the provided label element. Example: ObjectName Input Condition Object assertElementTextContainsByLabel # Description : This function will check if the text of the input element adjacent to provided label element contains the given text(in the Input Column) Input Format : @Expected Text. Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% assertElementTextByLabel # Description : This function will check if the text of the input element adjacent to provided label element equals the given text(in the Input Column) Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% Verifications # verifyVariableFromDataSheet # Description : This function will validate the value of a given variable against data in a datasheet cell. Input Format : Datasheet:column Condition : %variable% Example: ObjectName Input Condition Browser sheet:column %variable% verifyCookiePresent # Description : This function will check if the cookie is present. Search will occur based on the cookie name. Input Format :@Cookie name. Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% verifyCookieByName # Description : This function will search for the cookie by name and then compare the cookie value with the user-provided value. Input Format : @Cookie name:Cookie value. Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% verifyAlertText # Description : This function will match the alert text with the expected value. Input Format : @Expected Text Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% verifyAlertPresent # Description :This function will verify the presence of an alert. Example: ObjectName Input Condition Browser verifyVariable # Description : This function will check if the stored variable value matches the expected value. Input Format : @VariableName=Value Example: ObjectName Input Condition Browser @value verifyTextPresentInPage # Description : This function will search for the text inside html tag of the page. Input Format :@Expected Text Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% Wait for # waitForElementToBeVisible # Description : This function will wait till the element is visible on the screen Condition :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time Example: ObjectName Input Condition Object Time in seconds waitForElementToBeInVisible # Description : This function will wait till the element becomes invisible. Condition :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time Example: ObjectName Input Condition Object Time in seconds waitForElementToBeClickable # Description : This function will wait till the element becomes clickable. Condition :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time Example: ObjectName Input Condition Object Time in seconds waitForElementToBeSelected # Description : This function will wait till the element is selected Condition :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time Example: ObjectName Input Condition Object Time in seconds waitForElementToContainText # Description : This function will wait till the element contains the given text Input Format : @Text to check. Condition :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \" ChangeWaitTime \" function with the desired wait time Example: ObjectName Input Condition Object @value Time in seconds Object Sheet:Column Time in seconds Object %dynamicVar% Time in seconds waitForElementToContainValue # Description : This function will wait till the element contains the given value Input Format : @Text to check. Condition :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time Example: ObjectName Input Condition Object @value Time in seconds Object Sheet:Column Time in seconds Object %dynamicVar% Time in seconds waitForElementToBePresent # Description : This function will wait till the element loads in the DOM. Condition :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time Example: ObjectName Input Condition Browser Time in seconds waitForFrameAndSwitch # Description : This function will wait for the frame to be available and switch to it. Input : @id or name or index The input is optional if you choose to give the web element (the frame itself) under the object name.This element can be added as an object under the Object repository. If the object name used is \"Browser\", then you need to give the frame id or name or index under the input column Condition : Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \" ChangeWaitTime \" function with the desired wait time Example: ObjectName Input Condition Browser frame id or name or index Time in seconds (optional) Frame itself as an element Time in seconds (optional) waitForPageLoaded # Description : This function will wait till the page is loaded. Note: This is not for Ajax calls Condition :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time Example: ObjectName Input Condition Browser Time in seconds waitForAlertPresent # Description : This function will wait for alert to appear on the page. Condition :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time Example: ObjectName Input Condition Browser Time in seconds waitForTitleToBe # Description : This function will wait till the title of the page matches with the given text. Input Format : @Text to check Condition :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time Example: ObjectName Input Condition Browser @value Time in seconds Browser Sheet:Column Time in seconds Browser %dynamicVar% Time in seconds waitForTitleToContain # Description : This function will wait till the title of the page has the given text. Input Format : @Text to check Condition :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time Example: ObjectName Input Condition Browser @value Time in seconds Browser Sheet:Column Time in seconds Browser %dynamicVar% Time in seconds waitTillCustomScript # Description : This function will wait till the given javascript condition returns true. It is applicable only for JavaScript functions that return a boolean value. Input Format : @Javascript to evaluate Condition :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time Example: ObjectName Input Condition Browser @value Time in seconds Browser Sheet:Column Time in seconds Browser %dynamicVar% Time in seconds clickAndWait # Description : This function is used for clicking and waiting for the page to be loaded. Example: ObjectName Input Condition Object waitForElementSelectionToBeTrue # Description : This function will wait till the element selection becomes true Condition :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time Example: ObjectName Input Condition Object Time in seconds waitForElementSelectionToBeFalse # Description : This function will wait till the element selection becomes false. Condition :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use ChangeWaitTime function with the desired wait time Example: ObjectName Input Condition Object Time in seconds Switch to # To switch to a new frame, you can either go for these actions or you can set the frame id or name under the frame property of your object in the UI of the tool. switchToFrameByIndex # Description : This function is used for switching control to a frame by given index. Input Format : @Frame's Index Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% switchToWindowByTitle # Description : This function is used for switching control to a window by given title. Input Format : @Window's Title Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% switchToWindowByIndex # Description : This function is used for switching control to a window by given index. Input Format : @Window's Index Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% switchToFrame # Description : This function is used for switching control to frame with id or name specified. Input Format : @Frame Name or Id Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% switchToWindowByTitleStartsWith # Description : This function is used for switching control to another window whose title begins with the provided data. Input Format : @Expected text Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% switchToWindowByTitleContains # Description : This function is used for switching control to another window whose title has the provided data. Input Format : @Expected text Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% switchToWindowByTitleEndsWith # Description : This function is used for switching control to another window whose title ends with the provided data Input Format : @Expected text Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% switchToWindowByTitleMatches # Description : This function is used for switching control to another window whose title matches with the provided data (can use regex also). Input Format : @Expected text Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% switchToDefaultContent # Description : This function is used for switching control to the default window. Example: ObjectName Input Condition Browser createAndSwitchToWindow # Description : This function is used to create a new window and then for switching control to the newly created window. Input Format : @url to open after creating a new window. If this input column is empty then empty url will be loaded Example: ObjectName Input Condition Browser Browser @value Browser Sheet:Column Browser %dynamicVar% closeAndSwitchToWindow # Description : This function will close the current window and switch back to the default window. Example: ObjectName Input Condition Browser Drop down # selectByIndex # Description : This function will select an option from a drop down whose index matches the given index. Input Format : @Expected Value's Index Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% deSelectAll # Description : This function will clear all the selected entries. This is only valid when there is support for multiple selections in the drop down. Example: ObjectName Input Condition Object selectByVisibleText # Description : This function will select an option from a drop down whose visible text matches the given text. Input Format : @Expected Value's Index Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% selectMultipleByText # Description : This function will select all options that display the text matching the given text. Input Format : @Expected Text1,Expected Text2 Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% selectMultipleByValue # Description : This function will select all options that have value matching the given value. Input Format : @Expected value1,Expected value2 Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% selectByValue # Description : This function will select an option from a drop down whose value ('value' attribute of option HTML tag) matches the given value. Input Format : @Expected Text Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% selectMultipleByIndex # Description : This function will select all multiple options that have index matching the given set of indices. Input Format : @Expected index1,Expected index2 Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% deSelectByVisibleText # Description : This function will de-select an option that displays text matching the given text. Input Format : @Expected Text Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% deSelectByValue # Description : This function will de-select an option that has value matching the given value. Input Format : @Expected value Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% deSelectByIndex # Description : This function will de-select an option that has index matching the given index. Input Format : @Expected index Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% assertSelectContains # Description : This function will assert if the selected element from the drop down matches the user-specified input. Input Format : @Expected Text Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% selectValueFromUnorderedList # Description : This function will select the value based on the visible text from an unordered list. Input Format : @Expected Text Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% selectIndexFromUnorderedList # Description : This function will select the value from an unordered list based on the index. Input Format : @Expected Value's index Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% deSelectMultipleByText # Description : This function will deselect all options that display text matching the given text. Input Format : @Expected Text1,Expected Text2 Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% deSelectMultipleByValue # Description : This function will de-select all options that has value matching the given values. Input Format : @Expected value1,Expected value2 Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% deSelectMultipleByIndex # Description : This function will de-select all options that has index matching the given indices. This is done by examining the \"index\" attribute of an element, and not merely by counting.If there is no index attribute used then option identified by the count Input Format : @Expected index1,Expected index2 Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% selectAll # Description : This function will select all options from a select element. Example: ObjectName Input Condition Object Table # getCellValue # Description : This function is used to get data from the desired cell of the web table and store it in a user-defined variable. Input Format : @RowNo;ColNo,%variableName% Example: ObjectName Input Condition Object @value getColCount # Description : This function is used to count the number of columns in a desired row in a web table and store it in a user-defined variable. Input Format : @RowNo,%variableName% Example: ObjectName Input Condition Object @value getRowNumber # Description : This function is used to get the number of the row of the desired data in a web table and store it in a user-defined variable. Input Format : @Expected Data,%variableName% Example: ObjectName Input Condition Object @value getColNumber # Description : This function is used to get the column number of the desired data in a web table and store it in a user-defined variable. Input Format : @Expected Data,%variableName% Example: ObjectName Input Condition Object @value getRowCount # Description : This function is used to count the number of rows in a web table and store it in a user-defined variable. Input Format : %variableName% Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% Relative Command # set_Relative # Description : This function will set data in an element based on the property of its parent (Useful when a page has objects with similar properties but their parents are unique). Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% click_Relative # Description : This function will click an element based on the property of its parent (Useful when a page has objects with similar properties but their parents are unique) Example: ObjectName Input Condition Object Dynamic Object # setglobalObjectProperty # Description : This function is used to customize all objects\u2019 property based on the requirement at runtime.User can give his desired value as an input which will replace the matching condition in the object's property. For more details, please refer to Help>Faq>Dynamic Object Handling>How to change Object property at runtime? Input Format :Input Column : @User Defined Text String Condition Column : #Variable name Example: ObjectName Input Condition Browser @value %var% Browser Sheet:Column %var% Browser %dynamicVar% %var% setObjectProperty # Description : This function is used to customize any object property based on the requirement during the runtime. User can give a desired value as an input which will replace the matching condition in the object property. For more details, refer to: Help>Faq>Dynamic Object Handling>How to change Object property at runtime? Input Format : @User Defined Text String Condition Column : #Variable name Example: ObjectName Input Condition Object @value %var% Object Sheet:Column %var% Object %dynamicVar% %var% Checkbox # uncheck # Description : This function will uncheck the specified check box. Example: ObjectName Input Condition Object checkAllCheckBoxes # Description : This function will check all the checkboxes on a page. Example: ObjectName Input Condition Browser check # Description : This function will check the specified checkbox element. Example: ObjectName Input Condition Object JS Commands # clickByJS # Description : This function will use JavaScript to click an object (useful when selenium functions do not work). Example: ObjectName Input Condition Object setByJS # Description : This function will use JavaScript to set data in an object (useful when selenium functions do not work). Input Format : @Expected data Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% setEncryptedByJS # Description : This function will use JavaScript to set encrypted data in an object (useful when selenium functions do not work). Input Format : @Expected encrypted data Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% clearByJS # Description : This function will use JavaScript to clear an objects text content (useful when selenium functions do not work). Example: ObjectName Input Condition Object selectByJS # Description : This function is used to select a given option from a drop down and is useful when selenium functions do not work. Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% assertInsideBounds # Description : To function is used to check if the given object is inside the boundary. Example: ObjectName Input Condition Object executeEval # Description : This function is used to execute the JavaScript commands Input Format : @java script scripts Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% AssertElement # assertElementNotPresent # Description : This function will check if the specified element is not present in the web page ie. In the DOM itself. Example: ObjectName Input Condition Object assertElementNotSelected # Description : This function will check if the specified element is not selected Example: ObjectName Input Condition Object assertElementNotDisplayed # Description : This function will check if the specified element is not displayed. Example: ObjectName Input Condition Object assertElementNotEnabled # Description : This function will check if the specified element is not enabled. Example: ObjectName Input Condition Object assertElementDisplayed # Description : This function will check if the object is displayed on web page. Example: ObjectName Input Condition Object assertHScrollBarPresent # Description : This function will check if horizontal scrollbar is present. Example: ObjectName Input Condition Browser assertHScrollBarNotPresent # Description : This function will check if horizontal scrollbar is not present. Example: ObjectName Input Condition Browser assertVScrollBarPresent # Description : This function will check if vertical scrollbar is present. Example: ObjectName Input Condition Browser assertVScrollBarNotPresent # Description : This function will check if vertical scrollbar is not present. Example: ObjectName Input Condition Browser assertElementPresent # Description : This function will check if specified element is present in the web page ie. In the DOM of the page Example: ObjectName Input Condition Object assertElementSelected # Description : This function will check if the element is selected. Example: ObjectName Input Condition Object assertElementEnabled # Description : This function will check if the element is enabled. Example: ObjectName Input Condition Object assertPageSource # Description : This function will check if the page source content of the current page is matching with the expected page source content provided by the user. Input Format : @Expected PageSource content Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% Common methods # refreshDriver # Description : This function will refresh the current web page. Example: ObjectName Input Condition Browser forward # Description : This function is used for navigating forward to next page. Example: ObjectName Input Condition Browser submit # Description : This function will Submit an element. Example: ObjectName Input Condition Object dragElement # Description : This function will drag the specified element(under Object column) which can be later dropped on to other element by using dropElement . Example: ObjectName Input Condition Object dropElement # Description : This function will drop the element which is dragged by using dragElement over the object specified here. Example: ObjectName Input Condition Object dragAndDropBy # Description : This function will drag and drop an object by specified coordinates in the input column. Input Format :@x-coordinate,y-coordinate Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% addCookie # Description : This function will add a cookie defined in the input column. Input Format : @Cookie Name:Cookie Value Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% back # Description : This function is used for navigating to the previous page. Example: ObjectName Input Condition Browser pause # Description :This function is used for giving a pause (Thread.sleep) in execution. Input Format : @Time in miliseconds Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% doubleClickElement # Description : This function will double-click on an object. Example: ObjectName Input Condition Object mouseOverElement # Description : This function will perform the mouse over action on the object. Example: ObjectName Input Condition Object dragToAndDropElement # Description : This function is used to perform drag and drop operation. Specify the object which you want to drag, in the 'Object' column and specify the object on which you want to drop ,in the 'input' column. Input Format : @PageName:ObjectName(Destination) Example: ObjectName Input Condition Object @value releaseElement # Description : This function is used to release the element held by clickAndHoldElement Example: ObjectName Input Condition Object saveScreenshot # Description : This function will capture the screenshot and save in the specific location. Input Format : @File destination (eg. @D:\\filename.png) Example: ObjectName Input Condition Browser @value takeScreenshot # Description : This function will take a screenshot Example: ObjectName Input Condition Browser saveElementScreenshot # Description : This function will take a screenshot of the web element and save it in the location specified under the Input column. If no location is specified then the default location is your project folder\\ObjectRepository\\Pagename\\objectname . This function can also be used to save screenshots for the entire set of page objects, under the default location which is inside the ObjectRepository folder. Input Format (Optional) : @File destination (eg. @D:\\foldername) Example: ObjectName Input Condition Object @File destination(optional) Browser @PageName from the object repository storeCurrentUrl # Description : This function will store the current URL into a user defined variable. Input Format : %variable name% Example: ObjectName Input Condition Browser %dynamicVar% storeTextinDataSheet # Description : This Function will store the element's text into respective column of a given datasheet. Input Format : @Expected datasheet name:column name Example: ObjectName Input Condition Object Sheet:Column Note : Ensure that your data sheet doesn't contain column names with spaces. storeTextPresent # Description : This function will check if the element has expected text and store the flag 'True' or 'False' in the variable. Input Format : @Expected text Condition : %variable name% Example: ObjectName Input Condition Object @value %var% Object Sheet:Column %var% Object %dynamicVar% %var% storePageSource # Description : This function will store the page source content into a user-defined variable. Input Format : %variable name% Example: ObjectName Input Condition Browser %variable name% storeElementSelected # Description : This function will check if the element is selected and store the flag 'True' or 'False' in the variable. Input Format : %variable name% Example: ObjectName Input Condition Object %variable name% storeElementAttribute # Description : This function will store the element's attribute value into a user-defined variable. Input Format : @Elements_Attribute_Name Condition : %variable name% Example: ObjectName Input Condition Object @value %var% Object Sheet:Column %var% Object %dynamicVar% %var% storeElementValue # Description : This function will store the element's \u2018value\u2018 attribute into a user-defined variable. Input Format : %variable name% Example: ObjectName Input Condition Object %variable name% storeCookiePresent # Description : This function will check if the given cookie is present and store the flag 'True' or 'False' in the variable. Input Format : @cookieName Condition : %variable% Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% storeCookieByName # Description : This function will store the given cookie's value in the variable. Input Format : @cookieName Condition : %variable% Example: ObjectName Input Condition Browser @value %variable% storeAlertText # Description : This function will store alert text into a user defined variable. Input Format : %variable% Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% storeAlertPresent # Description : This function will check if alert is present and store the flag 'True' or 'False' in a given variable. Input Format : %variable% Example: ObjectName Input Condition Browser %variable% sendKeysToElement # Description : This function is used to perform keyboard events with respect to object. Input Format : @Keyboard_Keys(like Enter,Shift,Ctrl,Ctrl+A) Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% sendKeysToWindow # Description : This function is used to perform the keyboard actions with respect to window. Input Format : @Keyboard_Keys(like Enter,Shift,Ctrl,Ctrl+T) Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% deleteCookie # Description : This function will delete the cookie specified by the user. Input Format : @Cookie Name Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% answerAlert # Description : This function is used for switch control to alert and answer it. Input Format : @Expected Text Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% acceptAlert # Description : This function is used for switch control to alert and accept it. Example: ObjectName Input Condition Browser dismissAlert # Description : This function is used to switch control to alert and to dismiss it. Example: ObjectName Input Condition Browser storeVariable # Description : This function will store the given data (in the input column) into a user-defined variable.This function is same as AddVar action. Input Format : @Desired Value Condition : %variable name% Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% storeVariableInDataSheet # Description : This function will store the variable's value (as given in the condition column) in the given data sheet and data column Input Format : Sheetname:columnname Condition : %variable name% Example: ObjectName Input Condition Browser Sheet:Column %var% storeTitle # Description : This function will store the current web page title into a user-defined variable. Input Format : %variable name% Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% storeText # Description : This function will store the element's text into a user-defined variable. Input Format : %variable name% Example: ObjectName Input Condition Object %dynamicVar% storeEval # Description : Function to store a Javascript expression's value in a variable. For example if you have a variable as 'a' and 'b' and want to add them and store the sum in a variable, you can follow the following syntax. ObjectName Input Condition Browser @var a=20;var b=30;return c=a+b; %var% Now the value 50(a+b), will be stored in var. Input Format : javascript Example: ObjectName Input Condition Browser @value %var% print # Description : This function can be used for printing expected data in report. Input Format : @Expected Text or variable can also be printed like %var_name% Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% close # Description : This function will close the selenium Web Driver. Example: ObjectName Input Condition Browser Scroll # scrollHorizontallyTo # Description : This function will scroll horizontally to a user defined position. Input Format : @left|right|number Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% scrollVerticallyTo # Description : This function will scroll vertically to a user defined position. Input Format : @left|right|number Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% scrollToBottom # Description : This function will scroll to the bottom of the page Example: ObjectName Input Condition Browser scrollTo # Description : This function will scroll to a user specified position. Input Format : @x co-ordinate,y co-ordinate Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% scrollToTop # Description : This function will scroll to the top of the page Example: ObjectName Input Condition Browser scrollToLeft # Description : This function will scroll to the left of the page Example: ObjectName Input Condition Browser scrollToRight # Description : This function will scroll to the right of the page Example: ObjectName Input Condition Browser Assertions # assertTextPresentInPage # Description : This function will search for the expected text within the html tag of the page and assert the same Input Format : @Expected Text Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% assertVariable # Description : This function will assert a stored variable's value with the value given by the user. Input Format : @%var_name%=Expected Value Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% assertCookiePresent # Description : This function will assert the presence of a cookie by it's specified name and store the result in a variable. Input Format : @CookieName Example: ObjectName Input Condition Browser @value %variable% Browser Sheet:Column %variable% Browser %dynamicVar% %variable% assertCookieByName # Description : This function will assert the cookie's (the name of the cookie is given is specified in the input column) value with the one in the input column Input Format : @CookieName:CookieValue Example: ObjectName Input Condition Browser @data assertAlertText # Description : This function will assert the text present in alert with the given text. Input Format : @Expected Text Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% assertAlertPresent # Description : This function will assert the presence of an alert Example: ObjectName Input Condition Browser assertEval # Description : This function will assert if the evaluated javascript expression equals the expected value provided. Input Format : @javascript:expectedvalue. Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% assertVariableFromDataSheet # Description : This function will check if the variable given in the condition column has a value equals to the value from the datasheet mentioned in the input column. Input Format : Datasheet name:Column name Condition Format : %Variable name% Example: ObjectName Input Condition Browser Sheet:Column %variable% Title # assertTitleIStartsWith # Description : This function will validate if the current page title begins with the user-provided data. This function will ignore case of the user-provided data. Input Format : @Expected text Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% assertTitleEquals # Description : This function will validate if the title of the current page is equals the user-provided data. Input Format : @Expected text Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% assertTitleContains # Description : This function will validate if the title of the current page has the user-provided data. Input Format : @Expected text Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% assertTitleStartsWith # Description : This function will validate if the title of the current page begins with the user-provided data. Input Format : @Expected text Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% assertTitleEndsWith # Description : This function will validate if the title of the current page ends with the user-provided data. Input Format : @Expected text Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% assertTitleMatches # Description : This function will validate if the title current page matches the user-provided data. You can also use regular expression in the Input field. Input Format : @Expected text Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% assertTitleIEquals # Description : This function will validate if the title of the current page is equals the user-provided data. This function will ignore case of user provided data. Input Format : @Expected text Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% assertTitleIContains # Description : This function will validate if the title of the current page contains the user-provided data. This function will ignore case of the user-provided data. Input Format : @Expected text Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% assertTitleIEndsWith # Description : This function will validate if the title of the current page ends with the user-provided data. This function will ignore case of the user-provided data. Input Format : @Expected text Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% Attribute # assertElementAttrEquals # Description : This function will validate if specified attribute for an element is equal to the user-provided data. Input Format : attributeName attributeValue Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% assertElementAttrContains # Description : This function will validate if the specified attribute for an element contains the user-provided data. Input Format : attributeName attributeValue Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% assertElementAttrStartsWith # Description : This function will validate if specified attribute for an element begins with the user-provided data. Input Format : attributeName attributeValue Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% assertElementAttrEndsWith # Description : This function will validate if specified attribute for an element ends with user provided data. Input Format : attributeName attributeValue Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% assertElementAttrMatches # Description : This function will validate if specified attribute for an element matches with the user-provided data. You can also use regular expression in the Input field. Input Format : attributeName attributeValue Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% assertElementAttrIEquals # Description : This function will validate if specified attribute for an element is equals the user-provided data.This function will ignore case of the user-provided data. Input Format : attributeName attributeValue Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% assertElementAttrIContains # Description : This function will validate if specified attribute contains user-provided data.This function will ignore case of the user-provided data. Input Format : attributeName attributeValue Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% assertElementAttrIStartsWith # Description : This function will validate if specified attribute for an element begins with the user-provided data. This function will ignore case of the user-provided data. Input Format : attributeName attributeValue Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% assertElementAttrIEndsWith # Description : This function will validate if specified attribute for an element ends with the user-provided data. This function will ignore case of the user-provided data. Input Format : attributeName attributeValue Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% verifyElementAttribute # Description : This function will check if the value of the specified attribute of the element matches the user provided value. Input Format : attributeName attributeValue Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% Text # assertElementTextEquals # Description : This function will validate if a specified element text is equal to the user-provided text. Input Format : @Expected Text Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% assertElementTextContains # Description : This function will check if an element text contains the expected text. Input Format : @Expected Text Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% assertElementTextStartsWith # Description : This function will validate if specified element text starts with user provided data. Input Format : @Expected Text Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% assertElementTextEndsWith # Description : This function will validate if the specified element text ends with user-provided data. Input Format : @Expected Text Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% assertElementTextMatches # Description : This function will validate if a specified element text matches with the user-provided data. You can also use regular expression in the Input field . Input Format : @Expected Text Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% assertElementTextIEquals # Description : This function will validate if a specified element text is equal to the user-provided data. This function will ignore case of the user-provided data. Input Format : @Expected Text Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% assertElementTextIContains # Description : This function will validate if a specified element text contains the user-provided data. This function will ignore case of the user-provided data. Input Format : @Expected Text Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% assertElementTextIStartsWith # Description : This function will validate if a specified element text begins with the user-provided data. This function will ignore case of the user-provided data. Input Format : @Expected Text Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% assertElementTextIEndsWith # Description : This function will validate if a specified element text ends with the user-provided data. This function will ignore case of the user-provided data. Input Format : @Expected Text Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% URL # assertUrlEquals # Description :This function will validate if the current URL equals the user-provided data. Input Format : @Url value Syntax: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% assertUrlContains # Description :This function will validate if the current URL has the user-provided data. Input Format : @Url value Syntax: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% assertUrlStartsWith # Description :This function will validate if the current URL beings with the user-provided data. Input Format : @Url value Syntax: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% assertUrlEndsWith # Description :This function will validate if the current URL text ends with user-provided data. Input Format : @Url value Syntax: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% assertUrlMatches # Description : This function will validate if the current URL matches with the user-provided data. You can also use regular expression in the Input field. Input Format : @Url value Syntax: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% assertUrlIEquals # Description : This function will validate if the current URL is equal to the user-provided data. This function will ignore case of user-provided data. Input Format : @Url value Syntax: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% assertUrlIContains # Description : This function will validate if the current URL has the user-provided data.This function will ignore case of user-provided data. Input Format : @Url value Syntax: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% assertUrlIStartsWith # Description : This function will validate if the current URL begins with the user-provided data. This function will ignore case of user provided data. Input Format : @Url value Syntax: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar% assertUrlIEndsWith # Description : This function will validate if the current URL ends with the user-provided data. This function will ignore case of user-provided data. Input Format : @Url value Syntax: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"Web"},{"location":"actions/webactions.html#web-actions","text":"","title":"Web Actions"},{"location":"actions/webactions.html#basic","text":"","title":"Basic"},{"location":"actions/webactions.html#set","text":"Description : This function is used to enter data in an object. Input Format : @Expected Text Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar% Inputs in the Input column can be either hardcoded (in this case the data is preceded by a \" @ \"), passed from the data sheet ( datasheet name : column name ) or passed from a variable value ( %variable name% ), as given in the above example.","title":"Set"},{"location":"actions/webactions.html#click","text":"Description : This function is used to perform click operation on an object. Example: ObjectName Input Condition Object","title":"Click"},{"location":"actions/webactions.html#rightclick","text":"Description : This function is used to perform right click operation on an object or in the browser. Example: ObjectName Input Condition Browser Object","title":"rightClick"},{"location":"actions/webactions.html#submitifexists","text":"Description : This function will check if an object exists. If the object exists, it will submit else it will ignore that step. Example: ObjectName Input Condition Object","title":"SubmitIfExists"},{"location":"actions/webactions.html#restartbrowser","text":"Description : This function is used to restart browser. Example: ObjectName Input Condition Browser","title":"RestartBrowser"},{"location":"actions/webactions.html#changewaittime","text":"Description : This function is used to change the default wait time(Default 10 sec). The default wait time for all the wait actions defined after changeWaitTime action will be the same as defined in the changeWaitTime action. Input Format : @Time in seconds Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"changeWaitTime"},{"location":"actions/webactions.html#setelementtimeout","text":"Description : This function is used to change the default timeout for Cognizant Intelligent Test Scripter's Object finding logic.(Default 10 second). The same action needs to be called with the default time (10 sec) as parameter when there is a need to switch to the default time for the succeeding steps. Input Format : @Time in seconds Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"setElementTimeOut"},{"location":"actions/webactions.html#setbrowsersize","text":"Description : This function will Set the browser size Input Format : In pixels for example @700x800 or @700,800 or @700 800 Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"setBrowserSize"},{"location":"actions/webactions.html#clickifexists","text":"Description : This function will check if an element exists. If the element exists, it will click the element, else it will ignore that step. Example: ObjectName Input Condition Object","title":"clickIfExists"},{"location":"actions/webactions.html#setifexists","text":"Description : This function will check if an element exists. If the element exists, data will be set for that element or that step will be ignored. Input Format : @Expected Text Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"SetIfExists"},{"location":"actions/webactions.html#setandcheck","text":"Description : This function is used to enter data in object and check if the element's value matches with the entered value. Input Format : @Expected Text Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"setAndCheck"},{"location":"actions/webactions.html#setencrypted","text":"Description : This function is used to enter encrypted data to the object specified Input Format : @Encrypted text Example: ObjectName Input Condition Object @value Object Sheet:Column Note : If the data is passed from a data sheet, the data in the datasheet should be encrypted","title":"setEncrypted"},{"location":"actions/webactions.html#filler","text":"Description : This is an empty action (does nothing), useful in some cases like looping/debugging. Example: ObjectName Input Condition Browser","title":"filler"},{"location":"actions/webactions.html#startbrowser","text":"Description : This function is used to start a specified browser. Input Format : @Browser's Name Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"StartBrowser"},{"location":"actions/webactions.html#stopbrowser","text":"Description : This function is used to stop the current browser Example: ObjectName Input Condition Browser","title":"StopBrowser"},{"location":"actions/webactions.html#addvar","text":"Description : This function is used to add a user-defined variable with a desired value and the scope of this variable is till the end of the test case in which it is defined Input Format : @Expected Text Condition : %variable name% Example: ObjectName Input Condition Browser @value %Variable% Browser Sheet:Column %Variable% Browser %dynamicVar% %Variable%","title":"AddVar"},{"location":"actions/webactions.html#addglobalvar","text":"Description : Same as AddVar but scope is till the end of the test set execution. Input Format : Text in Input Condition : %variable name% Example: ObjectName Input Condition Browser @value %Variable% Browser Sheet:Column %Variable% Browser %dynamicVar% %Variable%","title":"AddGlobalVar"},{"location":"actions/webactions.html#clear","text":"Description : This function is used to clear the object's text Example: ObjectName Input Condition Object","title":"clear"},{"location":"actions/webactions.html#moveto","text":"Description : Move the browser view to the specified element. Example: ObjectName Input Condition Object","title":"moveTo"},{"location":"actions/webactions.html#open","text":"Description : This function will open the URL provided by the user in the default browser Input Format : @Expected Text Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"Open"},{"location":"actions/webactions.html#highlight","text":"Description : Make a rectangular border around the element Input Format : Color in hexcode like @#ff44ff . If it is left empty red will be taken as default. Example: ObjectName Input Condition Object Object @value Object Sheet:Column Object %dynamicVar%","title":"highlight"},{"location":"actions/webactions.html#verify-element","text":"","title":"Verify Element"},{"location":"actions/webactions.html#verifyelementnotpresent","text":"Description : This function will check if the specified element is not present in the web page ie. In the DOM . Example: ObjectName Input Condition Object","title":"verifyElementNotPresent"},{"location":"actions/webactions.html#verifyelementnotselected","text":"Description : This function will check if the specified element is not selected. Example: ObjectName Input Condition Object","title":"verifyElementNotSelected"},{"location":"actions/webactions.html#verifyelementnotdisplayed","text":"Description : This function will verify if the element is not displayed. Example: ObjectName Input Condition Object","title":"verifyElementNotDisplayed"},{"location":"actions/webactions.html#verifyelementnotenabled","text":"Description : This function will check if the specified element is not enabled Example: ObjectName Input Condition Object","title":"verifyElementNotEnabled"},{"location":"actions/webactions.html#verifyelementdisplayed","text":"Description : This function will check if the object is displayed on web page. Example: ObjectName Input Condition Object","title":"verifyElementDisplayed"},{"location":"actions/webactions.html#verifyhsrollbarpresent","text":"Description : This function will check if the horizontal scrollbar is present. Example: ObjectName Input Condition Browser","title":"verifyHSrollBarPresent"},{"location":"actions/webactions.html#verifyhsrollbarnotpresent","text":"Description : This function will check if the horizontal scrollbar is not present. Example: ObjectName Input Condition Browser","title":"verifyHSrollBarNotPresent"},{"location":"actions/webactions.html#verifyvsrollbarpresent","text":"Description : This function will check if the vertical scrollbar is present. Example: ObjectName Input Condition Browser","title":"verifyVSrollBarPresent"},{"location":"actions/webactions.html#verifyvsrollbarnotpresent","text":"Description : This function will check if the vertical scrollbar is not present. Example: ObjectName Input Condition Browser","title":"verifyVSrollBarNotPresent"},{"location":"actions/webactions.html#verifyelementpresent","text":"Description : This function will check if the specified element is present in the web page ie) in the DOM. Example: ObjectName Input Condition Object","title":"verifyElementPresent"},{"location":"actions/webactions.html#verifyelementselected","text":"Description : This function will check if the element is selected. Example: ObjectName Input Condition Object","title":"verifyElementSelected"},{"location":"actions/webactions.html#verifyelementenabled","text":"Description : This function will check if the element is enabled. Example: ObjectName Input Condition Object","title":"verifyElementEnabled"},{"location":"actions/webactions.html#verifypagesource","text":"Description : This function will check if the page source content of the current page is matching with the expected page source content provided by the user. Input Format : @Expected PageSource Content Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"verifyPageSource"},{"location":"actions/webactions.html#browser-utility","text":"","title":"Browser Utility"},{"location":"actions/webactions.html#maximize","text":"Description :This function is used for maximizing the browser window. Example: ObjectName Input Condition Browser","title":"maximize"},{"location":"actions/webactions.html#authenticate","text":"Description :This function is used for handing the authentication window. Supports IE only. If executed for other browsers the script will fail. You can skip this by setting optional value in the Condition field. Input Format : @username##password Condition : optional Example: ObjectName Input Condition Browser @data Browser @data optional","title":"authenticate"},{"location":"actions/webactions.html#by-label","text":"","title":"By Label"},{"location":"actions/webactions.html#setinputbylabel","text":"Description : This function will set an input element, with the given data, that is adjacent to the provided label element. Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"setInputByLabel"},{"location":"actions/webactions.html#clickinputbylabel","text":"Description : This function will click an input element that is adjacent to the provided label element. Example: ObjectName Input Condition Object","title":"clickInputByLabel"},{"location":"actions/webactions.html#clickinputbytext","text":"Description : This function will click an input element that is adjacent to the provided text Input Format : @Expected Text Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"clickInputByText"},{"location":"actions/webactions.html#submitinputbylabel","text":"Description : This function will submit input element adjacent to the provided label element. Example: ObjectName Input Condition Object","title":"submitInputByLabel"},{"location":"actions/webactions.html#assertelementtextcontainsbylabel","text":"Description : This function will check if the text of the input element adjacent to provided label element contains the given text(in the Input Column) Input Format : @Expected Text. Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"assertElementTextContainsByLabel"},{"location":"actions/webactions.html#assertelementtextbylabel","text":"Description : This function will check if the text of the input element adjacent to provided label element equals the given text(in the Input Column) Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"assertElementTextByLabel"},{"location":"actions/webactions.html#verifications","text":"","title":"Verifications"},{"location":"actions/webactions.html#verifyvariablefromdatasheet","text":"Description : This function will validate the value of a given variable against data in a datasheet cell. Input Format : Datasheet:column Condition : %variable% Example: ObjectName Input Condition Browser sheet:column %variable%","title":"verifyVariableFromDataSheet"},{"location":"actions/webactions.html#verifycookiepresent","text":"Description : This function will check if the cookie is present. Search will occur based on the cookie name. Input Format :@Cookie name. Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"verifyCookiePresent"},{"location":"actions/webactions.html#verifycookiebyname","text":"Description : This function will search for the cookie by name and then compare the cookie value with the user-provided value. Input Format : @Cookie name:Cookie value. Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"verifyCookieByName"},{"location":"actions/webactions.html#verifyalerttext","text":"Description : This function will match the alert text with the expected value. Input Format : @Expected Text Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"verifyAlertText"},{"location":"actions/webactions.html#verifyalertpresent","text":"Description :This function will verify the presence of an alert. Example: ObjectName Input Condition Browser","title":"verifyAlertPresent"},{"location":"actions/webactions.html#verifyvariable","text":"Description : This function will check if the stored variable value matches the expected value. Input Format : @VariableName=Value Example: ObjectName Input Condition Browser @value","title":"verifyVariable"},{"location":"actions/webactions.html#verifytextpresentinpage","text":"Description : This function will search for the text inside html tag of the page. Input Format :@Expected Text Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"verifyTextPresentInPage"},{"location":"actions/webactions.html#wait-for","text":"","title":"Wait for"},{"location":"actions/webactions.html#waitforelementtobevisible","text":"Description : This function will wait till the element is visible on the screen Condition :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time Example: ObjectName Input Condition Object Time in seconds","title":"waitForElementToBeVisible"},{"location":"actions/webactions.html#waitforelementtobeinvisible","text":"Description : This function will wait till the element becomes invisible. Condition :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time Example: ObjectName Input Condition Object Time in seconds","title":"waitForElementToBeInVisible"},{"location":"actions/webactions.html#waitforelementtobeclickable","text":"Description : This function will wait till the element becomes clickable. Condition :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time Example: ObjectName Input Condition Object Time in seconds","title":"waitForElementToBeClickable"},{"location":"actions/webactions.html#waitforelementtobeselected","text":"Description : This function will wait till the element is selected Condition :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time Example: ObjectName Input Condition Object Time in seconds","title":"waitForElementToBeSelected"},{"location":"actions/webactions.html#waitforelementtocontaintext","text":"Description : This function will wait till the element contains the given text Input Format : @Text to check. Condition :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \" ChangeWaitTime \" function with the desired wait time Example: ObjectName Input Condition Object @value Time in seconds Object Sheet:Column Time in seconds Object %dynamicVar% Time in seconds","title":"waitForElementToContainText"},{"location":"actions/webactions.html#waitforelementtocontainvalue","text":"Description : This function will wait till the element contains the given value Input Format : @Text to check. Condition :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time Example: ObjectName Input Condition Object @value Time in seconds Object Sheet:Column Time in seconds Object %dynamicVar% Time in seconds","title":"waitForElementToContainValue"},{"location":"actions/webactions.html#waitforelementtobepresent","text":"Description : This function will wait till the element loads in the DOM. Condition :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time Example: ObjectName Input Condition Browser Time in seconds","title":"waitForElementToBePresent"},{"location":"actions/webactions.html#waitforframeandswitch","text":"Description : This function will wait for the frame to be available and switch to it. Input : @id or name or index The input is optional if you choose to give the web element (the frame itself) under the object name.This element can be added as an object under the Object repository. If the object name used is \"Browser\", then you need to give the frame id or name or index under the input column Condition : Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \" ChangeWaitTime \" function with the desired wait time Example: ObjectName Input Condition Browser frame id or name or index Time in seconds (optional) Frame itself as an element Time in seconds (optional)","title":"waitForFrameAndSwitch"},{"location":"actions/webactions.html#waitforpageloaded","text":"Description : This function will wait till the page is loaded. Note: This is not for Ajax calls Condition :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time Example: ObjectName Input Condition Browser Time in seconds","title":"waitForPageLoaded"},{"location":"actions/webactions.html#waitforalertpresent","text":"Description : This function will wait for alert to appear on the page. Condition :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time Example: ObjectName Input Condition Browser Time in seconds","title":"waitForAlertPresent"},{"location":"actions/webactions.html#waitfortitletobe","text":"Description : This function will wait till the title of the page matches with the given text. Input Format : @Text to check Condition :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time Example: ObjectName Input Condition Browser @value Time in seconds Browser Sheet:Column Time in seconds Browser %dynamicVar% Time in seconds","title":"waitForTitleToBe"},{"location":"actions/webactions.html#waitfortitletocontain","text":"Description : This function will wait till the title of the page has the given text. Input Format : @Text to check Condition :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time Example: ObjectName Input Condition Browser @value Time in seconds Browser Sheet:Column Time in seconds Browser %dynamicVar% Time in seconds","title":"waitForTitleToContain"},{"location":"actions/webactions.html#waittillcustomscript","text":"Description : This function will wait till the given javascript condition returns true. It is applicable only for JavaScript functions that return a boolean value. Input Format : @Javascript to evaluate Condition :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time Example: ObjectName Input Condition Browser @value Time in seconds Browser Sheet:Column Time in seconds Browser %dynamicVar% Time in seconds","title":"waitTillCustomScript"},{"location":"actions/webactions.html#clickandwait","text":"Description : This function is used for clicking and waiting for the page to be loaded. Example: ObjectName Input Condition Object","title":"clickAndWait"},{"location":"actions/webactions.html#waitforelementselectiontobetrue","text":"Description : This function will wait till the element selection becomes true Condition :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use \"ChangeWaitTime\" function with the desired wait time Example: ObjectName Input Condition Object Time in seconds","title":"waitForElementSelectionToBeTrue"},{"location":"actions/webactions.html#waitforelementselectiontobefalse","text":"Description : This function will wait till the element selection becomes false. Condition :Time in seconds [Optional]. If left empty default waitTime[10 sec] will be considered. If you want to increase the default wait time then you can use ChangeWaitTime function with the desired wait time Example: ObjectName Input Condition Object Time in seconds","title":"waitForElementSelectionToBeFalse"},{"location":"actions/webactions.html#switch-to","text":"To switch to a new frame, you can either go for these actions or you can set the frame id or name under the frame property of your object in the UI of the tool.","title":"Switch to"},{"location":"actions/webactions.html#switchtoframebyindex","text":"Description : This function is used for switching control to a frame by given index. Input Format : @Frame's Index Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"switchToFrameByIndex"},{"location":"actions/webactions.html#switchtowindowbytitle","text":"Description : This function is used for switching control to a window by given title. Input Format : @Window's Title Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"switchToWindowByTitle"},{"location":"actions/webactions.html#switchtowindowbyindex","text":"Description : This function is used for switching control to a window by given index. Input Format : @Window's Index Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"switchToWindowByIndex"},{"location":"actions/webactions.html#switchtoframe","text":"Description : This function is used for switching control to frame with id or name specified. Input Format : @Frame Name or Id Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"switchToFrame"},{"location":"actions/webactions.html#switchtowindowbytitlestartswith","text":"Description : This function is used for switching control to another window whose title begins with the provided data. Input Format : @Expected text Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"switchToWindowByTitleStartsWith"},{"location":"actions/webactions.html#switchtowindowbytitlecontains","text":"Description : This function is used for switching control to another window whose title has the provided data. Input Format : @Expected text Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"switchToWindowByTitleContains"},{"location":"actions/webactions.html#switchtowindowbytitleendswith","text":"Description : This function is used for switching control to another window whose title ends with the provided data Input Format : @Expected text Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"switchToWindowByTitleEndsWith"},{"location":"actions/webactions.html#switchtowindowbytitlematches","text":"Description : This function is used for switching control to another window whose title matches with the provided data (can use regex also). Input Format : @Expected text Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"switchToWindowByTitleMatches"},{"location":"actions/webactions.html#switchtodefaultcontent","text":"Description : This function is used for switching control to the default window. Example: ObjectName Input Condition Browser","title":"switchToDefaultContent"},{"location":"actions/webactions.html#createandswitchtowindow","text":"Description : This function is used to create a new window and then for switching control to the newly created window. Input Format : @url to open after creating a new window. If this input column is empty then empty url will be loaded Example: ObjectName Input Condition Browser Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"createAndSwitchToWindow"},{"location":"actions/webactions.html#closeandswitchtowindow","text":"Description : This function will close the current window and switch back to the default window. Example: ObjectName Input Condition Browser","title":"closeAndSwitchToWindow"},{"location":"actions/webactions.html#drop-down","text":"","title":"Drop down"},{"location":"actions/webactions.html#selectbyindex","text":"Description : This function will select an option from a drop down whose index matches the given index. Input Format : @Expected Value's Index Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"selectByIndex"},{"location":"actions/webactions.html#deselectall","text":"Description : This function will clear all the selected entries. This is only valid when there is support for multiple selections in the drop down. Example: ObjectName Input Condition Object","title":"deSelectAll"},{"location":"actions/webactions.html#selectbyvisibletext","text":"Description : This function will select an option from a drop down whose visible text matches the given text. Input Format : @Expected Value's Index Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"selectByVisibleText"},{"location":"actions/webactions.html#selectmultiplebytext","text":"Description : This function will select all options that display the text matching the given text. Input Format : @Expected Text1,Expected Text2 Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"selectMultipleByText"},{"location":"actions/webactions.html#selectmultiplebyvalue","text":"Description : This function will select all options that have value matching the given value. Input Format : @Expected value1,Expected value2 Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"selectMultipleByValue"},{"location":"actions/webactions.html#selectbyvalue","text":"Description : This function will select an option from a drop down whose value ('value' attribute of option HTML tag) matches the given value. Input Format : @Expected Text Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"selectByValue"},{"location":"actions/webactions.html#selectmultiplebyindex","text":"Description : This function will select all multiple options that have index matching the given set of indices. Input Format : @Expected index1,Expected index2 Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"selectMultipleByIndex"},{"location":"actions/webactions.html#deselectbyvisibletext","text":"Description : This function will de-select an option that displays text matching the given text. Input Format : @Expected Text Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"deSelectByVisibleText"},{"location":"actions/webactions.html#deselectbyvalue","text":"Description : This function will de-select an option that has value matching the given value. Input Format : @Expected value Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"deSelectByValue"},{"location":"actions/webactions.html#deselectbyindex","text":"Description : This function will de-select an option that has index matching the given index. Input Format : @Expected index Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"deSelectByIndex"},{"location":"actions/webactions.html#assertselectcontains","text":"Description : This function will assert if the selected element from the drop down matches the user-specified input. Input Format : @Expected Text Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"assertSelectContains"},{"location":"actions/webactions.html#selectvaluefromunorderedlist","text":"Description : This function will select the value based on the visible text from an unordered list. Input Format : @Expected Text Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"selectValueFromUnorderedList"},{"location":"actions/webactions.html#selectindexfromunorderedlist","text":"Description : This function will select the value from an unordered list based on the index. Input Format : @Expected Value's index Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"selectIndexFromUnorderedList"},{"location":"actions/webactions.html#deselectmultiplebytext","text":"Description : This function will deselect all options that display text matching the given text. Input Format : @Expected Text1,Expected Text2 Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"deSelectMultipleByText"},{"location":"actions/webactions.html#deselectmultiplebyvalue","text":"Description : This function will de-select all options that has value matching the given values. Input Format : @Expected value1,Expected value2 Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"deSelectMultipleByValue"},{"location":"actions/webactions.html#deselectmultiplebyindex","text":"Description : This function will de-select all options that has index matching the given indices. This is done by examining the \"index\" attribute of an element, and not merely by counting.If there is no index attribute used then option identified by the count Input Format : @Expected index1,Expected index2 Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"deSelectMultipleByIndex"},{"location":"actions/webactions.html#selectall","text":"Description : This function will select all options from a select element. Example: ObjectName Input Condition Object","title":"selectAll"},{"location":"actions/webactions.html#table","text":"","title":"Table"},{"location":"actions/webactions.html#getcellvalue","text":"Description : This function is used to get data from the desired cell of the web table and store it in a user-defined variable. Input Format : @RowNo;ColNo,%variableName% Example: ObjectName Input Condition Object @value","title":"getCellValue"},{"location":"actions/webactions.html#getcolcount","text":"Description : This function is used to count the number of columns in a desired row in a web table and store it in a user-defined variable. Input Format : @RowNo,%variableName% Example: ObjectName Input Condition Object @value","title":"getColCount"},{"location":"actions/webactions.html#getrownumber","text":"Description : This function is used to get the number of the row of the desired data in a web table and store it in a user-defined variable. Input Format : @Expected Data,%variableName% Example: ObjectName Input Condition Object @value","title":"getRowNumber"},{"location":"actions/webactions.html#getcolnumber","text":"Description : This function is used to get the column number of the desired data in a web table and store it in a user-defined variable. Input Format : @Expected Data,%variableName% Example: ObjectName Input Condition Object @value","title":"getColNumber"},{"location":"actions/webactions.html#getrowcount","text":"Description : This function is used to count the number of rows in a web table and store it in a user-defined variable. Input Format : %variableName% Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"getRowCount"},{"location":"actions/webactions.html#relative-command","text":"","title":"Relative Command"},{"location":"actions/webactions.html#set_relative","text":"Description : This function will set data in an element based on the property of its parent (Useful when a page has objects with similar properties but their parents are unique). Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"set_Relative"},{"location":"actions/webactions.html#click_relative","text":"Description : This function will click an element based on the property of its parent (Useful when a page has objects with similar properties but their parents are unique) Example: ObjectName Input Condition Object","title":"click_Relative"},{"location":"actions/webactions.html#dynamic-object","text":"","title":"Dynamic Object"},{"location":"actions/webactions.html#setglobalobjectproperty","text":"Description : This function is used to customize all objects\u2019 property based on the requirement at runtime.User can give his desired value as an input which will replace the matching condition in the object's property. For more details, please refer to Help>Faq>Dynamic Object Handling>How to change Object property at runtime? Input Format :Input Column : @User Defined Text String Condition Column : #Variable name Example: ObjectName Input Condition Browser @value %var% Browser Sheet:Column %var% Browser %dynamicVar% %var%","title":"setglobalObjectProperty"},{"location":"actions/webactions.html#setobjectproperty","text":"Description : This function is used to customize any object property based on the requirement during the runtime. User can give a desired value as an input which will replace the matching condition in the object property. For more details, refer to: Help>Faq>Dynamic Object Handling>How to change Object property at runtime? Input Format : @User Defined Text String Condition Column : #Variable name Example: ObjectName Input Condition Object @value %var% Object Sheet:Column %var% Object %dynamicVar% %var%","title":"setObjectProperty"},{"location":"actions/webactions.html#checkbox","text":"","title":"Checkbox"},{"location":"actions/webactions.html#uncheck","text":"Description : This function will uncheck the specified check box. Example: ObjectName Input Condition Object","title":"uncheck"},{"location":"actions/webactions.html#checkallcheckboxes","text":"Description : This function will check all the checkboxes on a page. Example: ObjectName Input Condition Browser","title":"checkAllCheckBoxes"},{"location":"actions/webactions.html#check","text":"Description : This function will check the specified checkbox element. Example: ObjectName Input Condition Object","title":"check"},{"location":"actions/webactions.html#js-commands","text":"","title":"JS Commands"},{"location":"actions/webactions.html#clickbyjs","text":"Description : This function will use JavaScript to click an object (useful when selenium functions do not work). Example: ObjectName Input Condition Object","title":"clickByJS"},{"location":"actions/webactions.html#setbyjs","text":"Description : This function will use JavaScript to set data in an object (useful when selenium functions do not work). Input Format : @Expected data Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"setByJS"},{"location":"actions/webactions.html#setencryptedbyjs","text":"Description : This function will use JavaScript to set encrypted data in an object (useful when selenium functions do not work). Input Format : @Expected encrypted data Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"setEncryptedByJS"},{"location":"actions/webactions.html#clearbyjs","text":"Description : This function will use JavaScript to clear an objects text content (useful when selenium functions do not work). Example: ObjectName Input Condition Object","title":"clearByJS"},{"location":"actions/webactions.html#selectbyjs","text":"Description : This function is used to select a given option from a drop down and is useful when selenium functions do not work. Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"selectByJS"},{"location":"actions/webactions.html#assertinsidebounds","text":"Description : To function is used to check if the given object is inside the boundary. Example: ObjectName Input Condition Object","title":"assertInsideBounds"},{"location":"actions/webactions.html#executeeval","text":"Description : This function is used to execute the JavaScript commands Input Format : @java script scripts Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"executeEval"},{"location":"actions/webactions.html#assertelement","text":"","title":"AssertElement"},{"location":"actions/webactions.html#assertelementnotpresent","text":"Description : This function will check if the specified element is not present in the web page ie. In the DOM itself. Example: ObjectName Input Condition Object","title":"assertElementNotPresent"},{"location":"actions/webactions.html#assertelementnotselected","text":"Description : This function will check if the specified element is not selected Example: ObjectName Input Condition Object","title":"assertElementNotSelected"},{"location":"actions/webactions.html#assertelementnotdisplayed","text":"Description : This function will check if the specified element is not displayed. Example: ObjectName Input Condition Object","title":"assertElementNotDisplayed"},{"location":"actions/webactions.html#assertelementnotenabled","text":"Description : This function will check if the specified element is not enabled. Example: ObjectName Input Condition Object","title":"assertElementNotEnabled"},{"location":"actions/webactions.html#assertelementdisplayed","text":"Description : This function will check if the object is displayed on web page. Example: ObjectName Input Condition Object","title":"assertElementDisplayed"},{"location":"actions/webactions.html#asserthscrollbarpresent","text":"Description : This function will check if horizontal scrollbar is present. Example: ObjectName Input Condition Browser","title":"assertHScrollBarPresent"},{"location":"actions/webactions.html#asserthscrollbarnotpresent","text":"Description : This function will check if horizontal scrollbar is not present. Example: ObjectName Input Condition Browser","title":"assertHScrollBarNotPresent"},{"location":"actions/webactions.html#assertvscrollbarpresent","text":"Description : This function will check if vertical scrollbar is present. Example: ObjectName Input Condition Browser","title":"assertVScrollBarPresent"},{"location":"actions/webactions.html#assertvscrollbarnotpresent","text":"Description : This function will check if vertical scrollbar is not present. Example: ObjectName Input Condition Browser","title":"assertVScrollBarNotPresent"},{"location":"actions/webactions.html#assertelementpresent","text":"Description : This function will check if specified element is present in the web page ie. In the DOM of the page Example: ObjectName Input Condition Object","title":"assertElementPresent"},{"location":"actions/webactions.html#assertelementselected","text":"Description : This function will check if the element is selected. Example: ObjectName Input Condition Object","title":"assertElementSelected"},{"location":"actions/webactions.html#assertelementenabled","text":"Description : This function will check if the element is enabled. Example: ObjectName Input Condition Object","title":"assertElementEnabled"},{"location":"actions/webactions.html#assertpagesource","text":"Description : This function will check if the page source content of the current page is matching with the expected page source content provided by the user. Input Format : @Expected PageSource content Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"assertPageSource"},{"location":"actions/webactions.html#common-methods","text":"","title":"Common methods"},{"location":"actions/webactions.html#refreshdriver","text":"Description : This function will refresh the current web page. Example: ObjectName Input Condition Browser","title":"refreshDriver"},{"location":"actions/webactions.html#forward","text":"Description : This function is used for navigating forward to next page. Example: ObjectName Input Condition Browser","title":"forward"},{"location":"actions/webactions.html#submit","text":"Description : This function will Submit an element. Example: ObjectName Input Condition Object","title":"submit"},{"location":"actions/webactions.html#dragelement","text":"Description : This function will drag the specified element(under Object column) which can be later dropped on to other element by using dropElement . Example: ObjectName Input Condition Object","title":"dragElement"},{"location":"actions/webactions.html#dropelement","text":"Description : This function will drop the element which is dragged by using dragElement over the object specified here. Example: ObjectName Input Condition Object","title":"dropElement"},{"location":"actions/webactions.html#draganddropby","text":"Description : This function will drag and drop an object by specified coordinates in the input column. Input Format :@x-coordinate,y-coordinate Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"dragAndDropBy"},{"location":"actions/webactions.html#addcookie","text":"Description : This function will add a cookie defined in the input column. Input Format : @Cookie Name:Cookie Value Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"addCookie"},{"location":"actions/webactions.html#back","text":"Description : This function is used for navigating to the previous page. Example: ObjectName Input Condition Browser","title":"back"},{"location":"actions/webactions.html#pause","text":"Description :This function is used for giving a pause (Thread.sleep) in execution. Input Format : @Time in miliseconds Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"pause"},{"location":"actions/webactions.html#doubleclickelement","text":"Description : This function will double-click on an object. Example: ObjectName Input Condition Object","title":"doubleClickElement"},{"location":"actions/webactions.html#mouseoverelement","text":"Description : This function will perform the mouse over action on the object. Example: ObjectName Input Condition Object","title":"mouseOverElement"},{"location":"actions/webactions.html#dragtoanddropelement","text":"Description : This function is used to perform drag and drop operation. Specify the object which you want to drag, in the 'Object' column and specify the object on which you want to drop ,in the 'input' column. Input Format : @PageName:ObjectName(Destination) Example: ObjectName Input Condition Object @value","title":"dragToAndDropElement"},{"location":"actions/webactions.html#releaseelement","text":"Description : This function is used to release the element held by clickAndHoldElement Example: ObjectName Input Condition Object","title":"releaseElement"},{"location":"actions/webactions.html#savescreenshot","text":"Description : This function will capture the screenshot and save in the specific location. Input Format : @File destination (eg. @D:\\filename.png) Example: ObjectName Input Condition Browser @value","title":"saveScreenshot"},{"location":"actions/webactions.html#takescreenshot","text":"Description : This function will take a screenshot Example: ObjectName Input Condition Browser","title":"takeScreenshot"},{"location":"actions/webactions.html#saveelementscreenshot","text":"Description : This function will take a screenshot of the web element and save it in the location specified under the Input column. If no location is specified then the default location is your project folder\\ObjectRepository\\Pagename\\objectname . This function can also be used to save screenshots for the entire set of page objects, under the default location which is inside the ObjectRepository folder. Input Format (Optional) : @File destination (eg. @D:\\foldername) Example: ObjectName Input Condition Object @File destination(optional) Browser @PageName from the object repository","title":"saveElementScreenshot"},{"location":"actions/webactions.html#storecurrenturl","text":"Description : This function will store the current URL into a user defined variable. Input Format : %variable name% Example: ObjectName Input Condition Browser %dynamicVar%","title":"storeCurrentUrl"},{"location":"actions/webactions.html#storetextindatasheet","text":"Description : This Function will store the element's text into respective column of a given datasheet. Input Format : @Expected datasheet name:column name Example: ObjectName Input Condition Object Sheet:Column Note : Ensure that your data sheet doesn't contain column names with spaces.","title":"storeTextinDataSheet"},{"location":"actions/webactions.html#storetextpresent","text":"Description : This function will check if the element has expected text and store the flag 'True' or 'False' in the variable. Input Format : @Expected text Condition : %variable name% Example: ObjectName Input Condition Object @value %var% Object Sheet:Column %var% Object %dynamicVar% %var%","title":"storeTextPresent"},{"location":"actions/webactions.html#storepagesource","text":"Description : This function will store the page source content into a user-defined variable. Input Format : %variable name% Example: ObjectName Input Condition Browser %variable name%","title":"storePageSource"},{"location":"actions/webactions.html#storeelementselected","text":"Description : This function will check if the element is selected and store the flag 'True' or 'False' in the variable. Input Format : %variable name% Example: ObjectName Input Condition Object %variable name%","title":"storeElementSelected"},{"location":"actions/webactions.html#storeelementattribute","text":"Description : This function will store the element's attribute value into a user-defined variable. Input Format : @Elements_Attribute_Name Condition : %variable name% Example: ObjectName Input Condition Object @value %var% Object Sheet:Column %var% Object %dynamicVar% %var%","title":"storeElementAttribute"},{"location":"actions/webactions.html#storeelementvalue","text":"Description : This function will store the element's \u2018value\u2018 attribute into a user-defined variable. Input Format : %variable name% Example: ObjectName Input Condition Object %variable name%","title":"storeElementValue"},{"location":"actions/webactions.html#storecookiepresent","text":"Description : This function will check if the given cookie is present and store the flag 'True' or 'False' in the variable. Input Format : @cookieName Condition : %variable% Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"storeCookiePresent"},{"location":"actions/webactions.html#storecookiebyname","text":"Description : This function will store the given cookie's value in the variable. Input Format : @cookieName Condition : %variable% Example: ObjectName Input Condition Browser @value %variable%","title":"storeCookieByName"},{"location":"actions/webactions.html#storealerttext","text":"Description : This function will store alert text into a user defined variable. Input Format : %variable% Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"storeAlertText"},{"location":"actions/webactions.html#storealertpresent","text":"Description : This function will check if alert is present and store the flag 'True' or 'False' in a given variable. Input Format : %variable% Example: ObjectName Input Condition Browser %variable%","title":"storeAlertPresent"},{"location":"actions/webactions.html#sendkeystoelement","text":"Description : This function is used to perform keyboard events with respect to object. Input Format : @Keyboard_Keys(like Enter,Shift,Ctrl,Ctrl+A) Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"sendKeysToElement"},{"location":"actions/webactions.html#sendkeystowindow","text":"Description : This function is used to perform the keyboard actions with respect to window. Input Format : @Keyboard_Keys(like Enter,Shift,Ctrl,Ctrl+T) Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"sendKeysToWindow"},{"location":"actions/webactions.html#deletecookie","text":"Description : This function will delete the cookie specified by the user. Input Format : @Cookie Name Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"deleteCookie"},{"location":"actions/webactions.html#answeralert","text":"Description : This function is used for switch control to alert and answer it. Input Format : @Expected Text Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"answerAlert"},{"location":"actions/webactions.html#acceptalert","text":"Description : This function is used for switch control to alert and accept it. Example: ObjectName Input Condition Browser","title":"acceptAlert"},{"location":"actions/webactions.html#dismissalert","text":"Description : This function is used to switch control to alert and to dismiss it. Example: ObjectName Input Condition Browser","title":"dismissAlert"},{"location":"actions/webactions.html#storevariable","text":"Description : This function will store the given data (in the input column) into a user-defined variable.This function is same as AddVar action. Input Format : @Desired Value Condition : %variable name% Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"storeVariable"},{"location":"actions/webactions.html#storevariableindatasheet","text":"Description : This function will store the variable's value (as given in the condition column) in the given data sheet and data column Input Format : Sheetname:columnname Condition : %variable name% Example: ObjectName Input Condition Browser Sheet:Column %var%","title":"storeVariableInDataSheet"},{"location":"actions/webactions.html#storetitle","text":"Description : This function will store the current web page title into a user-defined variable. Input Format : %variable name% Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"storeTitle"},{"location":"actions/webactions.html#storetext","text":"Description : This function will store the element's text into a user-defined variable. Input Format : %variable name% Example: ObjectName Input Condition Object %dynamicVar%","title":"storeText"},{"location":"actions/webactions.html#storeeval","text":"Description : Function to store a Javascript expression's value in a variable. For example if you have a variable as 'a' and 'b' and want to add them and store the sum in a variable, you can follow the following syntax. ObjectName Input Condition Browser @var a=20;var b=30;return c=a+b; %var% Now the value 50(a+b), will be stored in var. Input Format : javascript Example: ObjectName Input Condition Browser @value %var%","title":"storeEval"},{"location":"actions/webactions.html#print","text":"Description : This function can be used for printing expected data in report. Input Format : @Expected Text or variable can also be printed like %var_name% Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"print"},{"location":"actions/webactions.html#close","text":"Description : This function will close the selenium Web Driver. Example: ObjectName Input Condition Browser","title":"close"},{"location":"actions/webactions.html#scroll","text":"","title":"Scroll"},{"location":"actions/webactions.html#scrollhorizontallyto","text":"Description : This function will scroll horizontally to a user defined position. Input Format : @left|right|number Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"scrollHorizontallyTo"},{"location":"actions/webactions.html#scrollverticallyto","text":"Description : This function will scroll vertically to a user defined position. Input Format : @left|right|number Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"scrollVerticallyTo"},{"location":"actions/webactions.html#scrolltobottom","text":"Description : This function will scroll to the bottom of the page Example: ObjectName Input Condition Browser","title":"scrollToBottom"},{"location":"actions/webactions.html#scrollto","text":"Description : This function will scroll to a user specified position. Input Format : @x co-ordinate,y co-ordinate Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"scrollTo"},{"location":"actions/webactions.html#scrolltotop","text":"Description : This function will scroll to the top of the page Example: ObjectName Input Condition Browser","title":"scrollToTop"},{"location":"actions/webactions.html#scrolltoleft","text":"Description : This function will scroll to the left of the page Example: ObjectName Input Condition Browser","title":"scrollToLeft"},{"location":"actions/webactions.html#scrolltoright","text":"Description : This function will scroll to the right of the page Example: ObjectName Input Condition Browser","title":"scrollToRight"},{"location":"actions/webactions.html#assertions","text":"","title":"Assertions"},{"location":"actions/webactions.html#asserttextpresentinpage","text":"Description : This function will search for the expected text within the html tag of the page and assert the same Input Format : @Expected Text Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"assertTextPresentInPage"},{"location":"actions/webactions.html#assertvariable","text":"Description : This function will assert a stored variable's value with the value given by the user. Input Format : @%var_name%=Expected Value Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"assertVariable"},{"location":"actions/webactions.html#assertcookiepresent","text":"Description : This function will assert the presence of a cookie by it's specified name and store the result in a variable. Input Format : @CookieName Example: ObjectName Input Condition Browser @value %variable% Browser Sheet:Column %variable% Browser %dynamicVar% %variable%","title":"assertCookiePresent"},{"location":"actions/webactions.html#assertcookiebyname","text":"Description : This function will assert the cookie's (the name of the cookie is given is specified in the input column) value with the one in the input column Input Format : @CookieName:CookieValue Example: ObjectName Input Condition Browser @data","title":"assertCookieByName"},{"location":"actions/webactions.html#assertalerttext","text":"Description : This function will assert the text present in alert with the given text. Input Format : @Expected Text Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"assertAlertText"},{"location":"actions/webactions.html#assertalertpresent","text":"Description : This function will assert the presence of an alert Example: ObjectName Input Condition Browser","title":"assertAlertPresent"},{"location":"actions/webactions.html#asserteval","text":"Description : This function will assert if the evaluated javascript expression equals the expected value provided. Input Format : @javascript:expectedvalue. Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"assertEval"},{"location":"actions/webactions.html#assertvariablefromdatasheet","text":"Description : This function will check if the variable given in the condition column has a value equals to the value from the datasheet mentioned in the input column. Input Format : Datasheet name:Column name Condition Format : %Variable name% Example: ObjectName Input Condition Browser Sheet:Column %variable%","title":"assertVariableFromDataSheet"},{"location":"actions/webactions.html#title","text":"","title":"Title"},{"location":"actions/webactions.html#asserttitleistartswith","text":"Description : This function will validate if the current page title begins with the user-provided data. This function will ignore case of the user-provided data. Input Format : @Expected text Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"assertTitleIStartsWith"},{"location":"actions/webactions.html#asserttitleequals","text":"Description : This function will validate if the title of the current page is equals the user-provided data. Input Format : @Expected text Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"assertTitleEquals"},{"location":"actions/webactions.html#asserttitlecontains","text":"Description : This function will validate if the title of the current page has the user-provided data. Input Format : @Expected text Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"assertTitleContains"},{"location":"actions/webactions.html#asserttitlestartswith","text":"Description : This function will validate if the title of the current page begins with the user-provided data. Input Format : @Expected text Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"assertTitleStartsWith"},{"location":"actions/webactions.html#asserttitleendswith","text":"Description : This function will validate if the title of the current page ends with the user-provided data. Input Format : @Expected text Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"assertTitleEndsWith"},{"location":"actions/webactions.html#asserttitlematches","text":"Description : This function will validate if the title current page matches the user-provided data. You can also use regular expression in the Input field. Input Format : @Expected text Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"assertTitleMatches"},{"location":"actions/webactions.html#asserttitleiequals","text":"Description : This function will validate if the title of the current page is equals the user-provided data. This function will ignore case of user provided data. Input Format : @Expected text Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"assertTitleIEquals"},{"location":"actions/webactions.html#asserttitleicontains","text":"Description : This function will validate if the title of the current page contains the user-provided data. This function will ignore case of the user-provided data. Input Format : @Expected text Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"assertTitleIContains"},{"location":"actions/webactions.html#asserttitleiendswith","text":"Description : This function will validate if the title of the current page ends with the user-provided data. This function will ignore case of the user-provided data. Input Format : @Expected text Example: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"assertTitleIEndsWith"},{"location":"actions/webactions.html#attribute","text":"","title":"Attribute"},{"location":"actions/webactions.html#assertelementattrequals","text":"Description : This function will validate if specified attribute for an element is equal to the user-provided data. Input Format : attributeName attributeValue Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"assertElementAttrEquals"},{"location":"actions/webactions.html#assertelementattrcontains","text":"Description : This function will validate if the specified attribute for an element contains the user-provided data. Input Format : attributeName attributeValue Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"assertElementAttrContains"},{"location":"actions/webactions.html#assertelementattrstartswith","text":"Description : This function will validate if specified attribute for an element begins with the user-provided data. Input Format : attributeName attributeValue Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"assertElementAttrStartsWith"},{"location":"actions/webactions.html#assertelementattrendswith","text":"Description : This function will validate if specified attribute for an element ends with user provided data. Input Format : attributeName attributeValue Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"assertElementAttrEndsWith"},{"location":"actions/webactions.html#assertelementattrmatches","text":"Description : This function will validate if specified attribute for an element matches with the user-provided data. You can also use regular expression in the Input field. Input Format : attributeName attributeValue Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"assertElementAttrMatches"},{"location":"actions/webactions.html#assertelementattriequals","text":"Description : This function will validate if specified attribute for an element is equals the user-provided data.This function will ignore case of the user-provided data. Input Format : attributeName attributeValue Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"assertElementAttrIEquals"},{"location":"actions/webactions.html#assertelementattricontains","text":"Description : This function will validate if specified attribute contains user-provided data.This function will ignore case of the user-provided data. Input Format : attributeName attributeValue Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"assertElementAttrIContains"},{"location":"actions/webactions.html#assertelementattristartswith","text":"Description : This function will validate if specified attribute for an element begins with the user-provided data. This function will ignore case of the user-provided data. Input Format : attributeName attributeValue Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"assertElementAttrIStartsWith"},{"location":"actions/webactions.html#assertelementattriendswith","text":"Description : This function will validate if specified attribute for an element ends with the user-provided data. This function will ignore case of the user-provided data. Input Format : attributeName attributeValue Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"assertElementAttrIEndsWith"},{"location":"actions/webactions.html#verifyelementattribute","text":"Description : This function will check if the value of the specified attribute of the element matches the user provided value. Input Format : attributeName attributeValue Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"verifyElementAttribute"},{"location":"actions/webactions.html#text","text":"","title":"Text"},{"location":"actions/webactions.html#assertelementtextequals","text":"Description : This function will validate if a specified element text is equal to the user-provided text. Input Format : @Expected Text Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"assertElementTextEquals"},{"location":"actions/webactions.html#assertelementtextcontains","text":"Description : This function will check if an element text contains the expected text. Input Format : @Expected Text Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"assertElementTextContains"},{"location":"actions/webactions.html#assertelementtextstartswith","text":"Description : This function will validate if specified element text starts with user provided data. Input Format : @Expected Text Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"assertElementTextStartsWith"},{"location":"actions/webactions.html#assertelementtextendswith","text":"Description : This function will validate if the specified element text ends with user-provided data. Input Format : @Expected Text Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"assertElementTextEndsWith"},{"location":"actions/webactions.html#assertelementtextmatches","text":"Description : This function will validate if a specified element text matches with the user-provided data. You can also use regular expression in the Input field . Input Format : @Expected Text Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"assertElementTextMatches"},{"location":"actions/webactions.html#assertelementtextiequals","text":"Description : This function will validate if a specified element text is equal to the user-provided data. This function will ignore case of the user-provided data. Input Format : @Expected Text Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"assertElementTextIEquals"},{"location":"actions/webactions.html#assertelementtexticontains","text":"Description : This function will validate if a specified element text contains the user-provided data. This function will ignore case of the user-provided data. Input Format : @Expected Text Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"assertElementTextIContains"},{"location":"actions/webactions.html#assertelementtextistartswith","text":"Description : This function will validate if a specified element text begins with the user-provided data. This function will ignore case of the user-provided data. Input Format : @Expected Text Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"assertElementTextIStartsWith"},{"location":"actions/webactions.html#assertelementtextiendswith","text":"Description : This function will validate if a specified element text ends with the user-provided data. This function will ignore case of the user-provided data. Input Format : @Expected Text Example: ObjectName Input Condition Object @value Object Sheet:Column Object %dynamicVar%","title":"assertElementTextIEndsWith"},{"location":"actions/webactions.html#url","text":"","title":"URL"},{"location":"actions/webactions.html#asserturlequals","text":"Description :This function will validate if the current URL equals the user-provided data. Input Format : @Url value Syntax: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"assertUrlEquals"},{"location":"actions/webactions.html#asserturlcontains","text":"Description :This function will validate if the current URL has the user-provided data. Input Format : @Url value Syntax: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"assertUrlContains"},{"location":"actions/webactions.html#asserturlstartswith","text":"Description :This function will validate if the current URL beings with the user-provided data. Input Format : @Url value Syntax: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"assertUrlStartsWith"},{"location":"actions/webactions.html#asserturlendswith","text":"Description :This function will validate if the current URL text ends with user-provided data. Input Format : @Url value Syntax: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"assertUrlEndsWith"},{"location":"actions/webactions.html#asserturlmatches","text":"Description : This function will validate if the current URL matches with the user-provided data. You can also use regular expression in the Input field. Input Format : @Url value Syntax: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"assertUrlMatches"},{"location":"actions/webactions.html#asserturliequals","text":"Description : This function will validate if the current URL is equal to the user-provided data. This function will ignore case of user-provided data. Input Format : @Url value Syntax: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"assertUrlIEquals"},{"location":"actions/webactions.html#asserturlicontains","text":"Description : This function will validate if the current URL has the user-provided data.This function will ignore case of user-provided data. Input Format : @Url value Syntax: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"assertUrlIContains"},{"location":"actions/webactions.html#asserturlistartswith","text":"Description : This function will validate if the current URL begins with the user-provided data. This function will ignore case of user provided data. Input Format : @Url value Syntax: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"assertUrlIStartsWith"},{"location":"actions/webactions.html#asserturliendswith","text":"Description : This function will validate if the current URL ends with the user-provided data. This function will ignore case of user-provided data. Input Format : @Url value Syntax: ObjectName Input Condition Browser @value Browser Sheet:Column Browser %dynamicVar%","title":"assertUrlIEndsWith"},{"location":"faq/FAQ_GitHub.html","text":"Is CITS compatible with latest Chrome browser versions? Please update the chrome driver version, to the most compatible one for your specific chrome browser version. http://chromedriver.chromium.org/downloads This can be done by replacing the compatible driver in \"CITS installation location/lib/Drivers\". Can CITS be integrated with Jenkins? CITS integration with CI/CD tools is feasible through command line argument support. Navigate to the CITS IDE,right click on the test case or test set and choose the option \"Get CmdLine Syntax\u201d. This command can be executed from any batch or shell console which makes the integration possible. In order to integrate with Jenkins, follow the steps below, Create a Jenkins job and place all CITS files in the Jenkins jobs workspace. Further, in the \u201cbuild\u201d tab click on \u201cexecute windows batch command\u201d or \u201cexecute shell\u201d Place the command to call the CITS Run.bat file in the batch console. This job can further be configured for a scheduled execution or triggered based on a commit in the central repository Do I need to set JDK path while trying to inject scripts? Inject script requires JDK to compile your .java files to .class files for execution. If JDK path is not set in the Run.bat file or system Path variable or in JAVA_HOME a prompt \u201cSelect JDK bin path\u201d is displayed in the CITS IDE. Where do I get the log files in case of a test execution failure? The console log of execution and other HTML reports is available in the CITS \u201c Project location/Results folder \u201d. To get the project location, right click on the project from the Test design panel and choose \"Details\" from the context menu. The log file for CITS IDE, is available in CITS installation location as log.txt. Does CITS support API Automation? CITS is predominantly for functional testing of web applications leveraging Selenium WebDriver. To achieve API automation users can write custom methods in CITS. One such a way is to leverage the command line execution support offered by SOAPUI. The test cases are to be created and saved in SOAPUI, however the execution can be done via SOAPUI command line support through custom methods in CITS. Which CITS action can be used to assert element\u2019s attribute values from the web application under test? The CITS action \"assertElementAttrEquals\" can be used. Similar actions are available here, https://cognizantqahub.github.io/Cognizant-Intelligent-Test-Scripter-Helpdoc/actions/webactions.html#assertelementattrequals How to use the reusable components created in CITS? Please use the keyword \" Execute \" under ObjectName column and double click on the actions column to choose the reusable component from the auto suggest. The above action can also be performed by dragging the reusable component in to the test case workspace, in order to add a step to call the respective reusable component in the test case. Does CITS generate java code? CITS projects are stored as flat files and all the actions called in your script are already coded in the engine project. There is no dynamic code generation. Please right click on your project in the design panel (under test plan) and choose \u201cDetails\u201d from the context menu, to open the project location and the flat files created under a project. How to introduce your project specific customized actions in CITS? Navigate to \u201cAutomation> Create CM project\u201d from CITS IDE and create a custom method project which can be imported in Eclipse IDE. Write your custom methods and build a standalone jar of this source code in to \u201clib/commands\u201d. Please refer here for more information, https://cognizantqahub.github.io/Cognizant-Intelligent-Test-Scripter-Helpdoc/faq/customfunction.html https://cognizantqahub.github.io/Cognizant-Intelligent-Test-Scripter-Helpdoc/faq/engine.html Does CITS support script execution in mobile safari browser? CITS supports mobile automation through Appium and hence script execution in mobile Safari is supported. However, the pre requites for mobile execution in Appium in any environment should be satisfied in the case of CITS as well. For more information, please refer here, http://appium.io/ How does CITS make a BDD feature file executable? CITS creates compatible test cases by reading the feature files. You can try using this feature, from Tools>BDD>import feature file from the CITS IDE. The scenario names in your feature file is your corresponding CITS test case names The step names in the feature file are your corresponding reusable component names The test data from Example table are also fetched as part of CITS test data sheet Demo Project is not executing in Chrome when tried in Mac OS. Do we have any prerequisites for the same? Please download the chrome driver binaries for Mac (since \"exe\" will not work in Mac environment) and navigate to \"Browser configuration\u201d from the CITS IDE in order to remove \".exe\" from the chrome driver path. What is the purpose of sub iteration column in CITS test data sheet? Within a test case the various sub iteration counts under iteration 1 represent the different sets of data against which the test case is going to be executed in a loop In general, there can be any number of sub iterations under an iteration and at the same time there can be any number of iterations in a datasheet. Execution of an iteration is nothing but executing all the sub iterations under that iteration. In the design panel only the sub iterations of iteration 1 is executed, the sub iterations of other iterations are considered only from the execution panel. How to map VSTS with automated scripts in CITS tool? CITS supports out of the box integration with TFS version 2017. Please ensure the below pre-requisites are met for establishing the integration, In TFS, ensure that the Test Suit under the Test Plan has the same name as the scenario containing the test cases Similarly, the test cases created in TFS, should have the same name as the test cases whose results need to be uploaded Execute the Test Set. Now the results will be updated to TFS once the execution is completed. In TFS, click the Runs Option to view the various runs and the status of each runs How to use Object Spy? You can either record your flow or use the object spy to add objects to the object repository. The objects, in the repository, can also be added manually in cases when a custom xpath needs to be introduced for the object. Refer steps below to use object spy, - Start object spy from CITS IDE - Click on the add on in the browser to get \u201cS\u201d in green - Move to object and perform \u201cCtrl+ Right click\u201d to add the same to the web object repository. Note : If you see the message \u201cerror in connection\u201d, please refer \"Exception FAQs\" question 1. How to read input from user, at run time? CITS has provisions to create data sheets for your project, which can be leveraged for parameterizing the test cases. Please use the action \"Set\" for sending any test data to the web application. Refer here for more information on actions in CITS, https://cognizantqahub.github.io/Cognizant-Intelligent-Test-Scripter-Helpdoc/actions/webactions Where to get CITS IE toolbar latest version? Please use the latest IE Toolbar from https://github.com/CognizantQAHub/Cognizant-Intelligent-Test-Scripter-IE-Toolbar/releases Do we have any user manual or help documentation for CITS? CITS help artifact can be accessed from here, https://cognizantqahub.github.io/Cognizant-Intelligent-Test-Scripter-Helpdoc/ All web actions available out of the box in CITS are here, https://cognizantqahub.github.io/Cognizant-Intelligent-Test-Scripter-Helpdoc/actions/webactions How to execute CITS script from command prompt without using the IDE? CITS supports command line execution and the syntax for executing a test case or test set from any batch console can be obtained by following the steps, Navigate to Test plan (or Test lab) and right click on any test case (or test set) Click on \u201cGet CmdLine Syntax\u201d context menu option in order to copy the command to clipboard Open command prompt and execute this command from the location where \u201cRun.bat\u201d file is available How to handle Conditions in script execution? Conditions can be handled in custom methods in CITS. Please refer here for understanding custom methods in CITS, https://cognizantqahub.github.io/Cognizant-Intelligent-Test-Scripter-Helpdoc/faq/engine https://cognizantqahub.github.io/Cognizant-Intelligent-Test-Scripter-Helpdoc/faq/customfunction Exception FAQs # How to handle the error message - 'Error in connecting App Refer FAQ' obtained while working with the CITS add on? Please refer the documentation here. https://cognizantqahub.github.io/Cognizant-Intelligent-Test-Scripter-Helpdoc/faq/addon.html#error-in-connection How to handle the exception \u2013 \u201cException in thread \"UI:MainUI - java.lang.ExceptionInInitializerError\u201d, triggered while launching CITS IDE? Please ensure that Java 8 is added to system path variable or CITS Run.bat file is hard coded with java 8 before working with the tool. How to handle the exception - \"Your connection is not secure\u201d faced during execution in Firefox? If you are trying to navigate to HTTPS site, a Firefox capability \u201cacceptInsecureCerts\u201d can help in overcoming this issue. This can be done by following steps below, Navigate to \u201c Browser Configuration - -> Manage Browsers - > Choose Firefox from the dropdown \u201d from the CITS IDE. Add the capability \u201c acceptInsecureCerts \u201d and a value for the same as \u201ctrue\u201d. Save the settings and execute your test case How to handle the exception - \u201cprotected mode settings are not same for all the browsers\u201d, encountered during script execution in IE browser? For automating in IE (With Selenium) there are some pre-requisites, please refer the below link, https://stackoverflow.com/questions/38222259/unable-to-launch-ie-browser-in-selenium-webdriver As suggested in the above links, please ensure two things, - Set the same protected mode settings for all the zones - Add the site's URL to the list of trusted sites in the trusted site zone under the security tab in Internet options Please ensure that user has sufficient rights and permission in the network to perform the above two suggestions. How to handle the exception - \u201cCould not resolve dependencies\u201d encountered while building the CITS tool? Some jars may not be downloaded with the proxy or maven configuration in your environment. Hence please download them manually and place them in the remote maven repository (m2 folder in your system). However, built version of CITS is available at, https://github.com/CognizantQAHub/Cognizant-Intelligent-Test-Scripter/releases and can be used in case you have not performed any changes to the source code, instead of building the source code from scratch. How to handle the exception \u2013 \u201cjava. lang.ClassNotFoundException\u201d triggered during database testing in CITS? Please place the driver jar file under \"lib/clib\" folder and provide the connection string \"jdbc: :// : / \" under database settings. Proceed to test for a successful connection. How to handle the exception \u201cSeems Like the Element is Not Visible or hidden at the moment\u201d that is triggered during a test case execution? Please check the following, - Analyze how the web element are identified during execution (with which property/attribute) from the console log of execution. - Check if that property (with which CITS is identifying the element) is a unique match for the element Try adding a \u201c waitforelementobeclickable \u201d action before performing the actual operation on the element Can CITS be integrated with Applitools? CITS is built on top of Selenium webdriver and Selenium can be integrated with Applitools, so is the case with CITS tool as well. Refer here to integrate Applitools with Selenium webdriver, https://applitools.com/tutorials/selenium-java.html This code can be then introduced as custom methods in CITS, refer here to know more about custom methods in CITS, https://cognizantqahub.github.io/Cognizant-Intelligent-Test-Scripter-Helpdoc/faq/customfunction.html Can CITS read data from external spreadsheets? CITS supports only .csv formatted files. External test data in CITS csv format, can be opened in CITS tool directly. Navigate to \"Test Data> Import TestData\" in the Test Design panel, in order to open an external test data sheet.","title":"FAQ"},{"location":"faq/FAQ_GitHub.html#exception-faqs","text":"How to handle the error message - 'Error in connecting App Refer FAQ' obtained while working with the CITS add on? Please refer the documentation here. https://cognizantqahub.github.io/Cognizant-Intelligent-Test-Scripter-Helpdoc/faq/addon.html#error-in-connection How to handle the exception \u2013 \u201cException in thread \"UI:MainUI - java.lang.ExceptionInInitializerError\u201d, triggered while launching CITS IDE? Please ensure that Java 8 is added to system path variable or CITS Run.bat file is hard coded with java 8 before working with the tool. How to handle the exception - \"Your connection is not secure\u201d faced during execution in Firefox? If you are trying to navigate to HTTPS site, a Firefox capability \u201cacceptInsecureCerts\u201d can help in overcoming this issue. This can be done by following steps below, Navigate to \u201c Browser Configuration - -> Manage Browsers - > Choose Firefox from the dropdown \u201d from the CITS IDE. Add the capability \u201c acceptInsecureCerts \u201d and a value for the same as \u201ctrue\u201d. Save the settings and execute your test case How to handle the exception - \u201cprotected mode settings are not same for all the browsers\u201d, encountered during script execution in IE browser? For automating in IE (With Selenium) there are some pre-requisites, please refer the below link, https://stackoverflow.com/questions/38222259/unable-to-launch-ie-browser-in-selenium-webdriver As suggested in the above links, please ensure two things, - Set the same protected mode settings for all the zones - Add the site's URL to the list of trusted sites in the trusted site zone under the security tab in Internet options Please ensure that user has sufficient rights and permission in the network to perform the above two suggestions. How to handle the exception - \u201cCould not resolve dependencies\u201d encountered while building the CITS tool? Some jars may not be downloaded with the proxy or maven configuration in your environment. Hence please download them manually and place them in the remote maven repository (m2 folder in your system). However, built version of CITS is available at, https://github.com/CognizantQAHub/Cognizant-Intelligent-Test-Scripter/releases and can be used in case you have not performed any changes to the source code, instead of building the source code from scratch. How to handle the exception \u2013 \u201cjava. lang.ClassNotFoundException\u201d triggered during database testing in CITS? Please place the driver jar file under \"lib/clib\" folder and provide the connection string \"jdbc: :// : / \" under database settings. Proceed to test for a successful connection. How to handle the exception \u201cSeems Like the Element is Not Visible or hidden at the moment\u201d that is triggered during a test case execution? Please check the following, - Analyze how the web element are identified during execution (with which property/attribute) from the console log of execution. - Check if that property (with which CITS is identifying the element) is a unique match for the element Try adding a \u201c waitforelementobeclickable \u201d action before performing the actual operation on the element Can CITS be integrated with Applitools? CITS is built on top of Selenium webdriver and Selenium can be integrated with Applitools, so is the case with CITS tool as well. Refer here to integrate Applitools with Selenium webdriver, https://applitools.com/tutorials/selenium-java.html This code can be then introduced as custom methods in CITS, refer here to know more about custom methods in CITS, https://cognizantqahub.github.io/Cognizant-Intelligent-Test-Scripter-Helpdoc/faq/customfunction.html Can CITS read data from external spreadsheets? CITS supports only .csv formatted files. External test data in CITS csv format, can be opened in CITS tool directly. Navigate to \"Test Data> Import TestData\" in the Test Design panel, in order to open an external test data sheet.","title":"Exception FAQs"},{"location":"faq/addon.html","text":"Addon Usage # Error in Connection # Follow the below steps for such scenario: Checking Connection status and establishing the same For Chrome and Firefox: Follow the steps below to troubleshoot the \"error in Connection\" error message, Open the options window , right-click the add-on to launch options window in chrome and use the shortcut Ctrl+Shift+O in firefox for the same. Launch spy or heal or record from the UI Click on Test Connection , use the default port 8887 , this port can also be changed as per your choice. If you are getting a red bulb , the certificate is not installed properly, so click on the bulb again, you will be navigated to the url https://localhost:8887/status , you need to give \" Proceed to unsafe \" in chrome and Add exception in Firefox to get to this link, If you do not get this message then you need to install the certificates manually. NOTE : A green bulb indicates that the connection between browser extension and the UI is established and is working fine. NOTE : For IE, you need to launch the record or spy or heal from the the UI and launch the URL https://localhost:8887/status to see the above connected . If you do not get the above message then you need to install the certificate manually. If the issue , still persists, then do the following steps, Configuring Proxy Setting If you are behind any proxy then add localhost in the Exceptions. Changing Java Version If the above troubleshooting didn't help you. please update your System Java version by updating System Java Path to latest Java Go to location Where Java is installed>java>jdkx.x.x_xx>jre>bin and copy the path Click on Windows StartButton>Computer>RightClick>Properties>Advance system settings>Environmentvariables under system variable append the path copied in step to the PATH environment variable. After updating Java path restart Cognizant Intelligent Test Scripter. Check the connection status and establish the same once again","title":"Addon Usage"},{"location":"faq/addon.html#addon-usage","text":"","title":"Addon Usage"},{"location":"faq/addon.html#error-in-connection","text":"Follow the below steps for such scenario: Checking Connection status and establishing the same For Chrome and Firefox: Follow the steps below to troubleshoot the \"error in Connection\" error message, Open the options window , right-click the add-on to launch options window in chrome and use the shortcut Ctrl+Shift+O in firefox for the same. Launch spy or heal or record from the UI Click on Test Connection , use the default port 8887 , this port can also be changed as per your choice. If you are getting a red bulb , the certificate is not installed properly, so click on the bulb again, you will be navigated to the url https://localhost:8887/status , you need to give \" Proceed to unsafe \" in chrome and Add exception in Firefox to get to this link, If you do not get this message then you need to install the certificates manually. NOTE : A green bulb indicates that the connection between browser extension and the UI is established and is working fine. NOTE : For IE, you need to launch the record or spy or heal from the the UI and launch the URL https://localhost:8887/status to see the above connected . If you do not get the above message then you need to install the certificate manually. If the issue , still persists, then do the following steps, Configuring Proxy Setting If you are behind any proxy then add localhost in the Exceptions. Changing Java Version If the above troubleshooting didn't help you. please update your System Java version by updating System Java Path to latest Java Go to location Where Java is installed>java>jdkx.x.x_xx>jre>bin and copy the path Click on Windows StartButton>Computer>RightClick>Properties>Advance system settings>Environmentvariables under system variable append the path copied in step to the PATH environment variable. After updating Java path restart Cognizant Intelligent Test Scripter. Check the connection status and establish the same once again","title":"Error in Connection"},{"location":"faq/customfunction.html","text":"Custom Function & Source Code Maintenance # Cognizant Intelligent Test Scripter mostly covers all the functions under the predefined list of available actions. But some times your scenario might demand a new action to be implemented, for example performing PDF or Excel validation.This can be done by creating your own custom method. Constraints For Custom Function # Any custom function that is written to fulfill your requirements should follow the below conditions. Custom Functions should be public . The return type of custom function should be void . Do not provide any package declarations when you inject through Inject Script . Custom Function should not contain parameters (use Data or Input or Condition variable for fetching data from the test case). Custom method should contain the Action annotation in order for it to get auto suggested in the UI. Ensure that you import all the necessary jar files from the lib folder of the tool installation directory containing the custom method. Also, any third party libraries needed for your custom method should be referenced. Sample Custom Method # For creating any Custom Method, a java class is required. A sample code for understanding the usage of various variables and functions that you can access in your custom method is available in the Engine (in the file SampleScript.java under the package named com.cognizant.cognizantits.engine.commands ).","title":"Custom Methods"},{"location":"faq/customfunction.html#custom-function-source-code-maintenance","text":"Cognizant Intelligent Test Scripter mostly covers all the functions under the predefined list of available actions. But some times your scenario might demand a new action to be implemented, for example performing PDF or Excel validation.This can be done by creating your own custom method.","title":"Custom Function &amp; Source Code Maintenance"},{"location":"faq/customfunction.html#constraints-for-custom-function","text":"Any custom function that is written to fulfill your requirements should follow the below conditions. Custom Functions should be public . The return type of custom function should be void . Do not provide any package declarations when you inject through Inject Script . Custom Function should not contain parameters (use Data or Input or Condition variable for fetching data from the test case). Custom method should contain the Action annotation in order for it to get auto suggested in the UI. Ensure that you import all the necessary jar files from the lib folder of the tool installation directory containing the custom method. Also, any third party libraries needed for your custom method should be referenced.","title":"Constraints For Custom Function"},{"location":"faq/customfunction.html#sample-custom-method","text":"For creating any Custom Method, a java class is required. A sample code for understanding the usage of various variables and functions that you can access in your custom method is available in the Engine (in the file SampleScript.java under the package named com.cognizant.cognizantits.engine.commands ).","title":"Sample Custom Method"},{"location":"faq/engine.html","text":"Engine # Cognizant Intelligent Test Scripter lets users view the overall engine structure available in the installation location. This is where the methods corresponding to all the available actions are defined and this folder can be imported into any IDE that supports Java. This gives users the flexibility to alter the code of the existing actions or add additional custom actions. After making modifications to the engine, the users can compile the JAR file and add it to the UI. How to open the Engine in Eclipse? # Open Eclipse IDE Import project using File > Import > Existing Projects into Workspace Locate the project Engine in your system. After performing the above steps, the project structure will look like this. Here you can view the source code for every predefined action in Cognizant Intelligent Test Scripter, under the respective java class file. Note : After Importing the Engine java project, ensure that the project is imported properly. Follow the steps below to check the same, Right-click on the Project and choose Properties from the context menu options. In the Resource window, check if the eclipse project is pointing to the right location, as shown. Note: You can also check if you are working on the right Engine in case you have installed multiple versions of Cognizant Intelligent Test Scripter. Where to place your custom method? # Once you have coded your custom method, you can place them in any one of the following locations, You can place your custom method in a separate .java file under any package of src folder in the Engine. You can create a custom package in the Engine under src and place all your .java files containing the custom methods in it. This is the best practice to add your custom method. You can also create a new java project and place your methods in it under a package. You can have your custom methods in a .java file saved in a separate location and inject the same in to the UI (Don't inject anything from the Engine project) How to use your custom method from the UI? # To use your custom method in the test case, you need to follow one of the following methods, depending on where you have place the .java files. Method 1: If you have a simple custom code to introduce into the UI, you can go with the Inject script option. Procedure for injecting custom script: \u2022 Navigate to Automation > Inject Script from the menu in the UI. A new dialog box will pop up as shown below \u2022 The various options available in this window are described below, Load Files : Add your custom function .java files using the Load button or drag and drop your java files containing the custom methods Inject Script :Select the files and click on inject script to inject the custom methods in those selected files Open Help : To open the help document Get Sample : Will copy a sample code for inject script to the clip board, as shown in the prompt below, Inject script requires jdk to compile your .java files in to .class files and run the same. If jdk path is not set in the Run.bat file or in the system Path variable or in Java_Home then, the following prompt will appear, to set the jdk path In case of any compilation errors you can watch the console section of the Inject script window. Note : After injecting your method, click on the icon and your custom method will be available in the UI, if you have given the Action method for validation in your custom method. Method 2 You can also create a new java project and define your custom methods in it and export this project separately as a jar file in the location <installation location>\\lib\\commands In the UI, go to Automation->Create CM Project . Give the location where the Project is to be created and click on Create Project. -After the project is created, import it into any IDE that supports Java. You can view the project along with the necessary dependency files as shown in the below image: You can rename the project, package and class names if required. After defining your custom method, you can simply export this project as a jar file in the location <installation location>\\lib\\commands . Follow the steps below, to do the same, Right-click on the src folder of your project and choose Export option Select jar option as shown below and click Next Export only the src folder and provide the path as <installation location>\\lib\\commands\\< jar name > , as shown in the image below, Note: Your custom method will be available in the UI, if you have given the Action method for validation in your custom method, after clicking on the Reload icon, Method 3 You can also place your custom method in the Engine and export the Engine as a Jar file again for the changes to be visible in the UI. Follow the steps below to export and hence replace the cognizant-intelligent-test-scripter-engine.jar in the installation location under the lib folder. You can place your custom method in any package inside src folder or create a custom package for the same. After placing your working custom method, follow the steps below to export the cognizant-intelligent-test-scripter-engine.jar.jar Right-click on the src folder of Engine project and choose Export option Select jar option as shown below and click Next Export only the src folder and provide the path as <installation location>\\lib\\cognizant-intelligent-test-scripter-engine.jar, as shown in the image below, How to run/debug a test case from Engine? # It is a best practice to run or debug your flow once from the Engine, before exporting the jar. In case of any errors or exceptions, you can redesign your flow and finally export the jar once it is done perfectly. Follow the steps below to execute test case from the Engine. Scenario 1 In case you have placed your custom method in the Engine, then follow the steps below to run from the Engine. Open Eclipse IDE Open the Engine by following the steps mentioned earlier in the section \"How to open the Engine in Eclipse\" . If you have your custom method in a separate custom package, then follow the steps below to add your package name to the package.properties file available in the installation location under the Configuration folder, as shown in the image below, To select the testcase or testset for execution, follow the steps given below. To run a test case or a test set, go to the Configuration folder available in the installation location and open the Global Settings.properties file. Provide the details as shown in the image below: For executing the test case, run the control.java file from the com.cognizant.cognizantits.engine.core package. You can also keep break points wherever required and debug the test case after triggering the execution form the control.java file. Scenario 2 If you have placed your custom method in a separate project, then follow the steps below, to run or debug the same from the Engine, Open the Engine project and your custom method containing project in eclipse IDE Right-click the Engine project and choose Configure build path . Under the projects tab, click on Add and choose the project and click on OK , as shown below Add the name of the package containing your custom method (in the new project), to the package.properties file in the Configuration folder. Now can debug or run the control.java file to execute your custom method from the Engine.","title":"Engine"},{"location":"faq/engine.html#engine","text":"Cognizant Intelligent Test Scripter lets users view the overall engine structure available in the installation location. This is where the methods corresponding to all the available actions are defined and this folder can be imported into any IDE that supports Java. This gives users the flexibility to alter the code of the existing actions or add additional custom actions. After making modifications to the engine, the users can compile the JAR file and add it to the UI.","title":"Engine"},{"location":"faq/engine.html#how-to-open-the-engine-in-eclipse","text":"Open Eclipse IDE Import project using File > Import > Existing Projects into Workspace Locate the project Engine in your system. After performing the above steps, the project structure will look like this. Here you can view the source code for every predefined action in Cognizant Intelligent Test Scripter, under the respective java class file. Note : After Importing the Engine java project, ensure that the project is imported properly. Follow the steps below to check the same, Right-click on the Project and choose Properties from the context menu options. In the Resource window, check if the eclipse project is pointing to the right location, as shown. Note: You can also check if you are working on the right Engine in case you have installed multiple versions of Cognizant Intelligent Test Scripter.","title":"How to open the Engine in Eclipse?"},{"location":"faq/engine.html#where-to-place-your-custom-method","text":"Once you have coded your custom method, you can place them in any one of the following locations, You can place your custom method in a separate .java file under any package of src folder in the Engine. You can create a custom package in the Engine under src and place all your .java files containing the custom methods in it. This is the best practice to add your custom method. You can also create a new java project and place your methods in it under a package. You can have your custom methods in a .java file saved in a separate location and inject the same in to the UI (Don't inject anything from the Engine project)","title":"Where to place your custom method?"},{"location":"faq/engine.html#how-to-use-your-custom-method-from-the-ui","text":"To use your custom method in the test case, you need to follow one of the following methods, depending on where you have place the .java files. Method 1: If you have a simple custom code to introduce into the UI, you can go with the Inject script option. Procedure for injecting custom script: \u2022 Navigate to Automation > Inject Script from the menu in the UI. A new dialog box will pop up as shown below \u2022 The various options available in this window are described below, Load Files : Add your custom function .java files using the Load button or drag and drop your java files containing the custom methods Inject Script :Select the files and click on inject script to inject the custom methods in those selected files Open Help : To open the help document Get Sample : Will copy a sample code for inject script to the clip board, as shown in the prompt below, Inject script requires jdk to compile your .java files in to .class files and run the same. If jdk path is not set in the Run.bat file or in the system Path variable or in Java_Home then, the following prompt will appear, to set the jdk path In case of any compilation errors you can watch the console section of the Inject script window. Note : After injecting your method, click on the icon and your custom method will be available in the UI, if you have given the Action method for validation in your custom method. Method 2 You can also create a new java project and define your custom methods in it and export this project separately as a jar file in the location <installation location>\\lib\\commands In the UI, go to Automation->Create CM Project . Give the location where the Project is to be created and click on Create Project. -After the project is created, import it into any IDE that supports Java. You can view the project along with the necessary dependency files as shown in the below image: You can rename the project, package and class names if required. After defining your custom method, you can simply export this project as a jar file in the location <installation location>\\lib\\commands . Follow the steps below, to do the same, Right-click on the src folder of your project and choose Export option Select jar option as shown below and click Next Export only the src folder and provide the path as <installation location>\\lib\\commands\\< jar name > , as shown in the image below, Note: Your custom method will be available in the UI, if you have given the Action method for validation in your custom method, after clicking on the Reload icon, Method 3 You can also place your custom method in the Engine and export the Engine as a Jar file again for the changes to be visible in the UI. Follow the steps below to export and hence replace the cognizant-intelligent-test-scripter-engine.jar in the installation location under the lib folder. You can place your custom method in any package inside src folder or create a custom package for the same. After placing your working custom method, follow the steps below to export the cognizant-intelligent-test-scripter-engine.jar.jar Right-click on the src folder of Engine project and choose Export option Select jar option as shown below and click Next Export only the src folder and provide the path as <installation location>\\lib\\cognizant-intelligent-test-scripter-engine.jar, as shown in the image below,","title":"How to use your custom method from the UI?"},{"location":"faq/engine.html#how-to-rundebug-a-test-case-from-engine","text":"It is a best practice to run or debug your flow once from the Engine, before exporting the jar. In case of any errors or exceptions, you can redesign your flow and finally export the jar once it is done perfectly. Follow the steps below to execute test case from the Engine. Scenario 1 In case you have placed your custom method in the Engine, then follow the steps below to run from the Engine. Open Eclipse IDE Open the Engine by following the steps mentioned earlier in the section \"How to open the Engine in Eclipse\" . If you have your custom method in a separate custom package, then follow the steps below to add your package name to the package.properties file available in the installation location under the Configuration folder, as shown in the image below, To select the testcase or testset for execution, follow the steps given below. To run a test case or a test set, go to the Configuration folder available in the installation location and open the Global Settings.properties file. Provide the details as shown in the image below: For executing the test case, run the control.java file from the com.cognizant.cognizantits.engine.core package. You can also keep break points wherever required and debug the test case after triggering the execution form the control.java file. Scenario 2 If you have placed your custom method in a separate project, then follow the steps below, to run or debug the same from the Engine, Open the Engine project and your custom method containing project in eclipse IDE Right-click the Engine project and choose Configure build path . Under the projects tab, click on Add and choose the project and click on OK , as shown below Add the name of the package containing your custom method (in the new project), to the package.properties file in the Configuration folder. Now can debug or run the control.java file to execute your custom method from the Engine.","title":"How to run/debug a test case from Engine?"}]}